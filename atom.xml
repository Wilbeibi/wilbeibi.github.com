<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wilbeibi</title>
  
  <subtitle>The trick, William Potter, is not minding that it hurts</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wilbeibi.com/"/>
  <updated>2018-03-02T23:47:02.726Z</updated>
  <id>http://wilbeibi.com/</id>
  
  <author>
    <name>wilbeibi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>把闲置服务器配置成 Docker Machine</title>
    <link href="http://wilbeibi.com/2018/03/2018-03-02/"/>
    <id>http://wilbeibi.com/2018/03/2018-03-02/</id>
    <published>2018-03-02T08:00:00.000Z</published>
    <updated>2018-03-02T23:47:02.726Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作和环境"><a href="#准备工作和环境" class="headerlink" title="准备工作和环境"></a>准备工作和环境</h2><p>我有一个闲置的 DigitalOcean VPS，只用来跑一个 RSS 服务，网易云音乐海外代理，大部分时间计算资源被浪费。这里把这个 Debian VPS 配置成 docker machine 来跑容器玩。</p><h3 id="Mac-上的准备"><a href="#Mac-上的准备" class="headerlink" title="Mac 上的准备"></a>Mac 上的准备</h3><ol><li>确定 docker client 版本和 VPS 上的 docker server 版本兼容（API版本兼容就行了）。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(Mac)$ docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:18.03.0-ce-rc1</span><br><span class="line"> API version:1.35 (downgraded from 1.37)</span><br><span class="line"> Go version:go1.9.4</span><br><span class="line"> Git commit:c160c73</span><br><span class="line"> Built:Thu Feb 22 02:34:03 2018</span><br><span class="line"> OS/Arch:darwin/amd64</span><br><span class="line"> Experimental:true</span><br><span class="line"> Orchestrator:swarm</span><br><span class="line"> # Server info...</span><br><span class="line"> </span><br><span class="line"> (DebianVPS)$ docker version</span><br><span class="line"> # Client info...</span><br><span class="line"> Server:</span><br><span class="line"> Engine:</span><br><span class="line">  Version:17.12.0-ce</span><br><span class="line">  API version:1.35 (minimum version 1.12)</span><br><span class="line">  Go version:go1.9.2</span><br><span class="line">  Git commit:c97c6d6</span><br><span class="line">  Built:Wed Dec 27 20:09:54 2017</span><br><span class="line">  OS/Arch:linux/amd64</span><br><span class="line">  Experimental:false</span><br></pre></td></tr></table></figure><ol><li>Mac 能通过 public key 认证访问 Debian VPS。</li><li>如果要在 VPS 使用 <code>sudo</code>，确保 VPS 上的 sudo 不需要密码：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># visudo</span><br><span class="line">%sudo   ALL=(ALL) NOPASSWD:ALL</span><br></pre></td></tr></table></figure><ol><li>VPS 防火墙允许 2376 端口访问（DigitalOcean 没有 inbound/outbound 限制，默认都开着的）。</li></ol><h2 id="创建-Docker-Machine"><a href="#创建-Docker-Machine" class="headerlink" title="创建 Docker Machine"></a>创建 Docker Machine</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine -D create \</span><br><span class="line">  --driver generic \</span><br><span class="line">  --generic-ip-address=&lt;VPS IP&gt; \</span><br><span class="line">  --generic-ssh-user &lt;VPS username after ssh&gt; \</span><br><span class="line">  asgard</span><br></pre></td></tr></table></figure><p><code>-D</code> 是 debug 模式。driver 可选 Google Compute，Amazon，Azure，DigitalOcean 官方的 Docker 服务，我们这里是 generic，任何 VPS 通用的。</p><p>这里默认的 key 是 <code>~/.ssh/id_rsa</code>, 如果不是要 <code>--generic-ssh-key &lt;path to private key&gt;</code>。</p><p>如果想配置</p><p>如果顺利的话，就可以看见:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine ls</span><br><span class="line">NAME      ACTIVE   DRIVER       STATE     URL                          SWARM   DOCKER        ERRORS</span><br><span class="line">asgard    -        generic      Running   tcp://&lt;VPS IP&gt;:2376           v17.12.0-ce</span><br><span class="line">default   *        virtualbox   Running   tcp://192.168.99.100:2376            v17.12.1-ce</span><br></pre></td></tr></table></figure><p>当前使用的是 Mac 上 VirtulBox 的 docker-machine <code>default</code>, 可以用 <code>eval $(docker-machine env asgard)</code> 切换到 VPS。</p><p>最后，如果要注册 DigitalOcean, 可以用我的 <a href="https://m.do.co/c/95be94b842f9" target="_blank" rel="external">referrer link</a>。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://blog.dahanne.net/2015/10/07/adding-an-existing-docker-host-to-docker-machine-a-few-tips/" target="_blank" rel="external">ADDING AN EXISTING DOCKER HOST TO DOCKER MACHINE : A FEW TIPS</a></li><li><a href="https://docs.docker.com/machine/reference/create/" target="_blank" rel="external">docker-machine create</a></li></ul>]]></content>
    
    <summary type="html">
    
      把已有的 VPS 当成 docker-machine 用
    
    </summary>
    
    
      <category term="docker" scheme="http://wilbeibi.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>搭建私有代码搜索引擎</title>
    <link href="http://wilbeibi.com/2018/03/2018-03-01_codeserch/"/>
    <id>http://wilbeibi.com/2018/03/2018-03-01_codeserch/</id>
    <published>2018-03-01T08:00:00.000Z</published>
    <updated>2018-03-02T18:42:59.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何学习好的的代码"><a href="#如何学习好的的代码" class="headerlink" title="如何学习好的的代码"></a>如何学习好的的代码</h2><p>我有一个需求，当学习一门新语言的时候，经常想看看一些库或者函数的 best practice。官方文章只告诉你如何调用，没有说什么时候调用，前后的 context 是什么，怎么组织代码。而在 github 搜索这个函数的代码片段的时候，出来的结果经常十几页，其中大量重复的结果，并且大部分代码质量并不怎么样，所以我的需求是：</p><ol><li>搜索范围只限定在我觉得的质量不错的项目中。</li><li>能显示上下文， 最好还能 index，查看定义和跳转。</li></ol><p>sourcegraph 的自搭 container 就不错，支持 Golang, Java, Python, Javascript, Ruby （比 OpenGrok 好太多，也方便太多）。就是上面所说的需求2要付费（damn）。</p><h2 id="Mac-上跑起来"><a href="#Mac-上跑起来" class="headerlink" title="Mac 上跑起来"></a>Mac 上跑起来</h2><p><a href="https://about.sourcegraph.com/" target="_blank" rel="external">sourcegraph</a> 上演示用的命令是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> --publish 7080:7080 --rm \</span><br><span class="line"> --volume $HOME/.sourcegraph/config:/etc/sourcegraph \</span><br><span class="line"> --volume $HOME/.sourcegraph/data:/var/opt/sourcegraph \</span><br><span class="line"> sourcegraph/server:2.5.17</span><br></pre></td></tr></table></figure><p>然后这是无法在 Mac 上直接跑的，貌似 volume 在$HOME 下都没法使用（见 <a href="https://github.com/sourcegraph/issues/issues/41" target="_blank" rel="external">issue</a>）。<br>所以稍稍改一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">--publish 7080:7080 --rm \</span><br><span class="line">--volume /data/sourcegraph/config:/etc/sourcegraph \</span><br><span class="line">--volume /data/sourcegraph/data:/var/opt/sourcegraph \</span><br><span class="line">sourcegraph/server:2.5.17</span><br></pre></td></tr></table></figure></p><p>然后登陆 http://<docker-machine ip="">:7080, 进入 Admin -&gt; Configuration, 开始配置<br><img src="https://i.imgur.com/qRBhqLl.png" alt=""></docker-machine></p><p>注意，默认的 <code>maxReposToSearch</code> 太小，我把这改成200。</p><p>其次，这里有很多方式添加搜索的项目，可以输入 Github token 来检索你自己的仓库（自己的破代码有什么好搜索的），也可以添加如图第三方代码。我们这里选 “Add other reposity”，”repos.list” 会添加一个空白的 url, path 让你填写，然后会提示重启server， server 会自己 clone 代码，indexing。</p><h2 id="批量添加代码库"><a href="#批量添加代码库" class="headerlink" title="批量添加代码库"></a>批量添加代码库</h2><p>这里我挑选的列表是 <a href="https://github.com/rsc/corpus" target="_blank" rel="external">rsc/corpus</a> —— Russ Cox 收集的 Golang 项目列表，能入 Russ 大佬法眼的代码，质量是有保证的。</p><p>仔细观察，Russ 是建了一个 bot，添加选好的 github 项目到 corpus 里。所以 commit message 很规范：<br><img src="https://i.imgur.com/wN4yzRj.png" alt=""></p><p>我们只要提取 commit message 中的项目地址，转换成 sourcegraph 配置需要的 url 和 path，就行啦~</p><p>这里用 <a href="https://developer.github.com/v3/repos/commits/" target="_blank" rel="external">Github API</a> 得到 commit 信息，<a href="https://stedolan.github.io/jq/" target="_blank" rel="external">jq</a>（方便好用的命令行 json 工具） 来过滤出 message。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://api.github.com/repos/rsc/corpus/commits\?per_page\=130 |jq &apos;.[] | &#123;message: .commit.message&#125;&apos; | grep addproject |  grep -o &apos;github.com/\w\+/\w\+&apos; &gt; repos.txt</span><br></pre></td></tr></table></figure><p>biu， 就得到项目列表了（截止写文章时候，86个）：</p><p><img src="https://i.imgur.com/Fig6EtK.png" alt=""></p><p>然后就是列表转配置，简单的几行 Golang 代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">patt := `</span><br><span class="line">    &#123;</span><br><span class="line">&quot;url&quot;: &quot;https://github.com/%s.git&quot;,</span><br><span class="line">&quot;path&quot;: &quot;%s&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    `</span><br><span class="line">scanner := bufio.NewScanner(os.Stdin)</span><br><span class="line">for scanner.Scan() &#123;</span><br><span class="line">path := strings.TrimPrefix(scanner.Text(), &quot;github.com/&quot;)</span><br><span class="line">fmt.Printf(patt, path, path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if scanner.Err() != nil &#123;</span><br><span class="line">// handle error.</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成 converter， <code>cat repos.txt | ./converter | pbcopy</code>, 复制到 sourcegraph 配置里（别忘了删掉配置json最后多出来的逗号)。</p><p>完成！项目需要 clone 一会，就会显示在 explore 里了：</p><p><img src="https://i.imgur.com/EfL2tai.png" alt=""></p><p>也可以用来搜索想要的代码片段了。</p><p><img src="https://i.imgur.com/1bF0wbr.png" alt=""></p><p>小练习：用 <a href="https://developer.github.com/v3/activity/starring/#list-repositories-being-starred" target="_blank" rel="external">Github API</a> 添加自己标记过星的项目。</p><p>PS: 这样哐哐猛造会 git clone 一大堆代码，很快 docker-machine 的空间就造光了，记得调大一点。/data 属于 tmpfs 区，是被加载到内存里的（<a href="https://stackoverflow.com/questions/31909979/docker-machine-no-space-left-on-device/32518699#32518699" target="_blank" rel="external">见这里</a>），所以要修改 <code>--virtualbox-memory</code>，默认1024M。 <code>--virtualbox-disk-size</code> 是用来存放 local image 的，也可以调大一点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker@default:~$ df -h # after docker-machine ssh</span><br><span class="line">Filesystem                Size      Used Available Use% Mounted on</span><br><span class="line">tmpfs                     2.6G    206.6M      2.4G   8% /</span><br><span class="line">tmpfs                     1.5G         0      1.5G   0% /dev/shm</span><br><span class="line">/dev/sda1                17.9G     44.7M     16.9G   0% /mnt/sda1</span><br><span class="line">cgroup                    1.5G         0      1.5G   0% /sys/fs/cgroup</span><br><span class="line">Users                   465.1G    327.2G    137.9G  70% /Users</span><br><span class="line">/dev/sda1                17.9G     44.7M     16.9G   0% /mnt/sda1/var/lib/docker</span><br><span class="line">/dev/sda1                17.9G     44.7M     16.9G   0% /mnt/sda1/var/lib/docker/plugins</span><br><span class="line"></span><br><span class="line">$ docker-machine rm default</span><br><span class="line">$ docker-machine create -d virtualbox --virtualbox-disk-size &quot;20000&quot; --virtualbox-memory &quot;3072&quot; default</span><br><span class="line"># remember to eval new docker env</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用 sourcegraph container 来检索自己的代码库
    
    </summary>
    
    
      <category term="sourcegraph" scheme="http://wilbeibi.com/tags/sourcegraph/"/>
    
      <category term="container" scheme="http://wilbeibi.com/tags/container/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes Mac 教程</title>
    <link href="http://wilbeibi.com/2018/02/2018-02-19_kub_mac/"/>
    <id>http://wilbeibi.com/2018/02/2018-02-19_kub_mac/</id>
    <published>2018-02-19T08:00:00.000Z</published>
    <updated>2018-02-21T07:39:19.592Z</updated>
    
    <content type="html"><![CDATA[<p>Kubernetes 是当前最流行，功能最齐全的 Container Orchestration 平台，如果 Docker 是集装箱，那么 Kubernetes 就是一个调度，交通，管理等一应俱全的码头。</p><p>本文希望能帮助读者不打针，不吃药，不用安装 minikube，无痛地在Mac上愉快的与 Kubernetes 玩耍。</p><p>翻译改编自 Romin Irani 的 <a href="https://rominirani.com/tutorial-getting-started-with-kubernetes-with-docker-on-mac-7f58467203fd" target="_blank" rel="external">https://rominirani.com/tutorial-getting-started-with-kubernetes-with-docker-on-mac-7f58467203fd</a></p><h2 id="预备工作与环境："><a href="#预备工作与环境：" class="headerlink" title="预备工作与环境："></a><strong>预备工作与环境</strong>：</h2><ol><li>MacOS High Sierra</li><li>安装 Docker Edge 版本（写此文时版本号是 18.02.0-ce-mac53）</li><li>我使用的命令行是 oh-my-zsh, 在 ~/.zshrc 的 plugins 部分添加 kubectl 和 docker，方便 命令自动补全。 </li><li>对 Kubernetes 的基本概念 pod，deployment，service namespace 有基本了解（不了解也没问题，文末有链接）</li></ol><p>在 Docker Edge 配置里，”Enable Kubernetes” -&gt; “Apply” -&gt; “Install”, 就会安装好所需的库，在后台跑起一个默认的 Kubernetes cluster。<br><img src="https://i.imgur.com/YYnBCBz.png" alt=""></p><p>看到 “Docker is running”, “Kubernetes is running” 两个绿点，万事俱备了。</p><h2 id="检查一下"><a href="#检查一下" class="headerlink" title="检查一下"></a><strong>检查一下</strong></h2><p>可以在命令行环境里检查一下安装。Server 和 Client 的版本可能会不一样，如果安装了 gcloud sdk 里的 Kubernetes，<code>current-context</code> 也会不一样（取决于你的 server 在哪儿）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl version</span><br><span class="line">Client Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;8&quot;, GitVersion:&quot;v1.8.6&quot;, GitCommit:&quot;6260bb08c46c31eea6cb538b34a9ceb3e406689c&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2017-12-21T06:34:11Z&quot;, GoVersion:&quot;go1.8.3&quot;, Compiler:&quot;gc&quot;, Platform:&quot;darwin/amd64&quot;&#125;</span><br><span class="line">Server Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;9&quot;, GitVersion:&quot;v1.9.2&quot;, GitCommit:&quot;5fa2db2bd46ac79e5e00a4e6ed24191080aa463b&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2018-01-18T09:42:01Z&quot;, GoVersion:&quot;go1.9.2&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux/amd64&quot;&#125;</span><br><span class="line"></span><br><span class="line">$ kubectl config current-context</span><br><span class="line">docker-for-desktop</span><br></pre></td></tr></table></figure><p>再看看 cluster，里面目前只有一个node。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl cluster-info</span><br><span class="line">Kubernetes master is running at https://localhost:6443</span><br><span class="line">KubeDNS is running at https://localhost:6443/api/v1/namespaces/kube-system/services/kube-dns/proxy</span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use &apos;kubectl cluster-info dump&apos;.</span><br><span class="line"></span><br><span class="line">$ kubectl get nodes</span><br><span class="line">NAME                 STATUS    ROLES     AGE       VERSION</span><br><span class="line">docker-for-desktop   Ready     master    9d        v1.9.2</span><br></pre></td></tr></table></figure><h2 id="安装-Kubernetes-Dashboard"><a href="#安装-Kubernetes-Dashboard" class="headerlink" title="安装 Kubernetes Dashboard"></a><strong>安装 Kubernetes Dashboard</strong></h2><p>下一步，给刚才的 Kubernetes cluster 安装一个 Dashboard，安装的过程也正是 Kubernetes 创建 deployment/services 的过程。Dashboard 的 kubernetes-dashboard.yaml 文件也是一个很好的学习例子，可以读一读。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yamlsecret “kubernetes-dashboard-certs” createdserviceaccount “kubernetes-dashboard” createdrole “kubernetes-dashboard-minimal” createdrolebinding “kubernetes-dashboard-minimal” createddeployment “kubernetes-dashboard” createdservice “kubernetes-dashboard” created</span><br></pre></td></tr></table></figure><p>在 kubernetes-dashboard.yaml 中，我们注意到 metadata 部分的 namespace 是 kube-system，来看一下 kube-system 下有哪些 pods。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods --namespace=kube-system</span><br><span class="line">NAME                                         READY     STATUS    RESTARTS   AGE</span><br><span class="line">etcd-docker-for-desktop                      1/1       Running   0          9d</span><br><span class="line">kube-apiserver-docker-for-desktop            1/1       Running   0          9d</span><br><span class="line">kube-controller-manager-docker-for-desktop   1/1       Running   0          9d</span><br><span class="line">kube-dns-6f4fd4bdf-6cmxv                     3/3       Running   0          9d</span><br><span class="line">kube-proxy-fmpgn                             1/1       Running   0          9d</span><br><span class="line">kube-scheduler-docker-for-desktop            1/1       Running   0          9d</span><br><span class="line">kubernetes-dashboard-845747bdd4-9fm69        1/1       Running   1          9d</span><br></pre></td></tr></table></figure><p>和 Kuberenetes architecture 图一一对应：<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/be/Kubernetes.png/600px-Kubernetes.png" alt="Kubernetes architecture diagram on Wikipedia"><br>每个 pod 一开始状态都是 ContainerCreating，小等几秒钟，就成功变成 Running。</p><p>成功运行后，我们开启 proxy server 从本地访问 Kubernetes API server：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl proxy</span><br><span class="line">Starting to serve on 127.0.0.1:8001</span><br></pre></td></tr></table></figure></p><p>浏览器里访问 <a href="http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/" target="_blank" rel="external">http://127.0.0.1:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy</a>：<br><img src="https://i.imgur.com/1rFaW57.png" alt=""><br>选 SKIP，就能看到 Dashboard 了：<br><img src="https://i.imgur.com/wVKvhEA.png" alt=""></p><p>在侧边栏点 Nodes，就能看到之前我们显示的 “docker-for-desktop”</p><p>注: 原文中用的是 <code>kubectl port-forward</code> 8443 端口，所以截图中地址栏都是 localhost:8443。原文使用的命令是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl port-forward kubernetes-dashboard-845747bdd4-9fm69 8443:8443 — namespace=kube-systemForwarding from 127.0.0.1:8443 -&gt; 8443</span><br></pre></td></tr></table></figure><p>但通过搜索，貌似 <code>kubectl proxy</code> 的方法更为简洁和主流。</p><h2 id="Nginx-示例"><a href="#Nginx-示例" class="headerlink" title="Nginx 示例"></a><strong>Nginx 示例</strong></h2><p>跑一个 <a href="https://hub.docker.com/_/nginx/" target="_blank" rel="external">Nginx container</a> 来看看整个过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl run hello-nginx --image=nginx --port=80deployment “hello-nginx” created</span><br></pre></td></tr></table></figure><p>这行命令创建了一个 deployment，该 deployment 会创建一个 pod，pod 负责运行 container：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods</span><br><span class="line">NAME                          READY     STATUS              RESTARTS   AGE</span><br><span class="line">hello-nginx-556b7bf96-2xw8f   0/1       ContainerCreating   0          12s</span><br></pre></td></tr></table></figure><p>等几秒钟，再看 Dashboard 的 Deployments：</p><p><img src="https://i.imgur.com/80x6zOI.png" alt=""></p><p>当 Pods 由 0/1 变成 1/1 的时候， 刚才的命令结果也变成 Running 了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods</span><br><span class="line">NAME                          READY     STATUS    RESTARTS   AGE</span><br><span class="line">hello-nginx-556b7bf96-2xw8f   1/1       Running   0          4m</span><br></pre></td></tr></table></figure><p>点侧边栏的 Pod，再点我们刚创建的 Pod “hello-nginx-556b7bf96-2xw8f”，能看到这个 pod 的细节：</p><p><img src="https://i.imgur.com/MzcZmj9.png" alt=""></p><p> 这里能看到给定的默认 labels，和分配的 IP （来此 docker-for-desktop Node）。</p><p> 右上角的这几个按钮也是我们经常用的功能，EXEC 打开一个浏览器中的 shell ssh 进入 pod，LOGS 查看日志。</p><p> <img src="https://i.imgur.com/e4vZ90F.png" alt=""></p><p>同样的，我们也可以通过 <code>kubectl describe node/pod</code> 命令来查看信息，如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl describe pod hello-nginx-556b7bf96-2xw8f</span><br><span class="line">Name:           hello-nginx-556b7bf96-2xw8f</span><br><span class="line">Namespace:      default</span><br><span class="line">Node:           docker-for-desktop/192.168.65.3</span><br><span class="line">Start Time:     Tue, 20 Feb 2018 22:34:19 -0800</span><br><span class="line">Labels:         pod-template-hash=112636952</span><br><span class="line">                run=hello-nginx</span><br><span class="line">Annotations:    &lt;none&gt;</span><br><span class="line">Status:         Running</span><br><span class="line">IP:             10.1.0.54</span><br><span class="line">Controlled By:  ReplicaSet/hello-nginx-556b7bf96</span><br><span class="line">Containers:</span><br><span class="line">  hello-nginx:</span><br><span class="line">    Container ID:   docker://5c5f68348ed8a204dcce089a21d71e36cbfdb6c7955fd28a7f148d5f44662861</span><br><span class="line">    Image:          nginx</span><br><span class="line">    Image ID:       docker-pullable://nginx@sha256:65f0ed5362b39c16cad51f27217c12ac9dd0db4dc47b0197969885f05198d4d8</span><br><span class="line">    Port:           80/TCP</span><br><span class="line">    State:          Running</span><br><span class="line">      Started:      Tue, 20 Feb 2018 22:34:37 -0800</span><br><span class="line">    Ready:          True</span><br><span class="line">    Restart Count:  0</span><br><span class="line">    Environment:    &lt;none&gt;</span><br><span class="line">    Mounts:</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from default-token-m99ws (ro)</span><br><span class="line">Conditions:</span><br><span class="line">  Type           Status</span><br><span class="line">  Initialized    True</span><br><span class="line">  Ready          True</span><br><span class="line">  PodScheduled   True</span><br><span class="line">Volumes:</span><br><span class="line">  default-token-m99ws:</span><br><span class="line">    Type:        Secret (a volume populated by a Secret)</span><br><span class="line">    SecretName:  default-token-m99ws</span><br><span class="line">    Optional:    false</span><br><span class="line">QoS Class:       BestEffort</span><br><span class="line">Node-Selectors:  &lt;none&gt;</span><br><span class="line">Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s</span><br><span class="line">                 node.kubernetes.io/unreachable:NoExecute for 300s</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason                 Age   From                         Message</span><br><span class="line">  ----    ------                 ----  ----                         -------</span><br><span class="line">  Normal  Scheduled              15m   default-scheduler            Successfully assigned hello-nginx-556b7bf96-2xw8f to docker-for-desktop</span><br><span class="line">  Normal  SuccessfulMountVolume  15m   kubelet, docker-for-desktop  MountVolume.SetUp succeeded for volume &quot;default-token-m99ws&quot;</span><br><span class="line">  Normal  Pulling                15m   kubelet, docker-for-desktop  pulling image &quot;nginx&quot;</span><br><span class="line">  Normal  Pulled                 15m   kubelet, docker-for-desktop  Successfully pulled image &quot;nginx&quot;</span><br><span class="line">  Normal  Created                15m   kubelet, docker-for-desktop  Created container</span><br><span class="line">  Normal  Started                15m   kubelet, docker-for-desktop  Started container</span><br></pre></td></tr></table></figure><h2 id="通过外部访问"><a href="#通过外部访问" class="headerlink" title="通过外部访问"></a><strong>通过外部访问</strong></h2><p>之前我们提到过，可以用 port-forward pod 来实现外部访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods</span><br><span class="line">NAME                          READY     STATUS    RESTARTS   AGE</span><br><span class="line">hello-nginx-556b7bf96-2xw8f   1/1       Running   0          46m</span><br><span class="line"></span><br><span class="line">$ kubectl port-forward hello-nginx-556b7bf96-2xw8f 8080:8080</span><br><span class="line">Forwarding from 127.0.0.1:8080 -&gt; 8080</span><br></pre></td></tr></table></figure><p>但这只暴露特定 pod 的端口，在实际中并不实用。</p><p>所以我们换一个方法，把 deployment 暴露成一个服务，供外部访问:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get deployment</span><br><span class="line">NAME          DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">hello-nginx   1         1         1            1           18m</span><br><span class="line"></span><br><span class="line">$ kubectl expose deployment hello-nginx --type=NodePort --name=hello-nginx-service</span><br><span class="line">service &quot;hello-nginx-service&quot; exposed</span><br><span class="line"></span><br><span class="line">$ kubectl get service</span><br><span class="line">NAME                  TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)                                         AGE</span><br><span class="line">hello-nginx-service   NodePort    10.109.0.203   &lt;none&gt;        80:30351/TCP                                    30s</span><br><span class="line">kubernetes            ClusterIP   10.96.0.1      &lt;none&gt;        443/TCP                                         10d</span><br></pre></td></tr></table></figure><p>现在，浏览器里就能访问 localhost:30351 了。</p><p>注意到真正的 EXTERNAL-IP 都是 none，这是因为 Mac 安装的 Docker cluster 并没有 LoadBalancer, 只有云服务上才有。</p>]]></content>
    
    <summary type="html">
    
      使用 Docker 自带的 Kubernetes 环境玩耍
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://wilbeibi.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>一周笔记</title>
    <link href="http://wilbeibi.com/2016/07/2016-07-31-weekly3/"/>
    <id>http://wilbeibi.com/2016/07/2016-07-31-weekly3/</id>
    <published>2016-07-31T07:00:00.000Z</published>
    <updated>2016-12-08T22:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="How-to-Write-a-Lisp-Interpreter-in-Python"><a href="#How-to-Write-a-Lisp-Interpreter-in-Python" class="headerlink" title="(How to Write a (Lisp) Interpreter (in Python))"></a><a href="http://norvig.com/lispy.html" target="_blank" rel="external">(How to Write a (Lisp) Interpreter (in Python))</a></h2><p>老文章。来自Peter Norvig 的用 Python 写个 lisp 解释器。代码和解释都很完美。记得有公司出面试题出类似的，如果用这文章里的思路解决就秒杀啊。</p><h2 id="DNS-The-good-parts"><a href="#DNS-The-good-parts" class="headerlink" title="DNS The good parts"></a><a href="https://www.petekeen.net/dns-the-good-parts" target="_blank" rel="external">DNS The good parts</a></h2><p>比较详细的介绍 DNS 的文章</p><h2 id="2016年科技阅读列"><a href="#2016年科技阅读列" class="headerlink" title="2016年科技阅读列"></a><a href="https://zhuanlan.zhihu.com/p/20472545" target="_blank" rel="external">2016年科技阅读列</a></h2><p>一系列架构和大数据文章的集合，质量良莠不齐，偶尔也有好玩的。</p><h2 id="高并发性能调试经验分享"><a href="#高并发性能调试经验分享" class="headerlink" title="高并发性能调试经验分享"></a><a href="https://zhuanlan.zhihu.com/p/21348220" target="_blank" rel="external">高并发性能调试经验分享</a></h2><p>最喜欢看这种调试的文章了，特别是这篇『在多线程和高并发环境下，如果有一个平均运行一百万次才出现一次的bug，你如何调试这个bug』，连思路带工具一路娓娓道来，非常值得一读。</p><h2 id="Penetration-Testing-Tools-Cheat-Sheet"><a href="#Penetration-Testing-Tools-Cheat-Sheet" class="headerlink" title="Penetration Testing Tools Cheat Sheet "></a><a href="https://highon.coffee/blog/penetration-testing-tools-cheat-sheet/" target="_blank" rel="external">Penetration Testing Tools Cheat Sheet </a></h2><p>渗透工具 cheatsheet，初入安全的朋友可能会用得到。</p><h2 id="“The-Best-Programming-Advice-I-Ever-Got”-with-Rob-Pike"><a href="#“The-Best-Programming-Advice-I-Ever-Got”-with-Rob-Pike" class="headerlink" title="“The Best Programming Advice I Ever Got” with Rob Pike"></a><a href="http://www.informit.com/articles/article.aspx?p=1941206" target="_blank" rel="external">“The Best Programming Advice I Ever Got” with Rob Pike</a></h2><p>Rob Pike 谈论 Ken Thompson 给他的编程建议：</p><blockquote><p>Ken taught me that thinking before debugging is extremely important. If you dive into the bug, you tend to fix the local issue in the code, but if you think about the bug first, how the bug came to be, you often find and correct a higher-level problem in the code that will improve the design and prevent further bugs.</p></blockquote><h2 id="The-twelve-factor-app"><a href="#The-twelve-factor-app" class="headerlink" title="The twelve-factor app"></a><a href="http://12factor.net" target="_blank" rel="external">The twelve-factor app</a></h2><p>从 Two Scoop of Django 上看来，有点类似写 app 的 best practices.</p><h2 id="The-Product-Managers’-Guide-to-Continuous-Delivery-and-DevOps"><a href="#The-Product-Managers’-Guide-to-Continuous-Delivery-and-DevOps" class="headerlink" title="The Product Managers’ Guide to Continuous Delivery and DevOps"></a><a href="http://www.mindtheproduct.com/2016/02/what-the-hell-are-ci-cd-and-devops-a-cheatsheet-for-the-rest-of-us" target="_blank" rel="external">The Product Managers’ Guide to Continuous Delivery and DevOps</a></h2><p>简单介绍什么是 Continuous Delivery 和 DevOps。</p><h2 id="ResysChina"><a href="#ResysChina" class="headerlink" title="ResysChina"></a><a href="https://zhuanlan.zhihu.com/resyschina" target="_blank" rel="external">ResysChina</a></h2><p>着重推荐算法文章的高质量知乎专栏</p><h2 id="Real–world-HTTP-2-400gb-of-images-per-day"><a href="#Real–world-HTTP-2-400gb-of-images-per-day" class="headerlink" title="Real–world HTTP/2: 400gb of images per day"></a><a href="https://99designs.com/tech-blog/blog/2016/07/14/real-world-http-2-400gb-of-images-per-day/" target="_blank" rel="external">Real–world HTTP/2: 400gb of images per day</a></h2><p>也是 debug 类的好网站。一个图片分享网站讲他们迁移到 HTTP/2 的性能提升和坑。</p>]]></content>
    
    <summary type="html">
    
      一周笔记第四篇
    
    </summary>
    
    
      <category term="notes" scheme="http://wilbeibi.com/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>一周笔记</title>
    <link href="http://wilbeibi.com/2016/06/2016-06-05-weekly2/"/>
    <id>http://wilbeibi.com/2016/06/2016-06-05-weekly2/</id>
    <published>2016-06-05T07:00:00.000Z</published>
    <updated>2016-12-08T22:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-Software-Development-Poverty-Trap"><a href="#The-Software-Development-Poverty-Trap" class="headerlink" title="The Software Development Poverty Trap"></a><a href="http://alexandros.resin.io/the-software-development-poverty-trap/?utm_source=wanqu.co&amp;utm_campaign=Wanqu+Daily&amp;utm_medium=website" target="_blank" rel="external">The Software Development Poverty Trap</a></h2><p>软件开发中的马太效应，越是差劲的团队越缺乏长期规划，用老旧的技术，写 ad-hoc 的代码，优秀的工程师越容易离开（斜眼看我司）。</p><h2 id="“把程序写好”这回事"><a href="#“把程序写好”这回事" class="headerlink" title="“把程序写好”这回事"></a><a href="http://mp.weixin.qq.com/s?__biz=MzA3MDMwOTcwMg==&amp;mid=2650004561&amp;idx=1&amp;sn=967c3816e3b0993b5517799183efb3be&amp;scene=0#rd" target="_blank" rel="external">“把程序写好”这回事</a></h2><p>来此余晟的微信公共号（对，就是翻译正则表达式的那哥们）。很多程序员在学校和工作中编程，但不知道如何写好程序，貌似也没有学校教如何『写好程序』。写好程序绝不是编译通过，跑过测试，符合 coding style 那么简单。文中提到的『荣誉感』还是挺重要的，我写代码的时候就会想着对自己的每一行代码负责，通过 code review 看别人的代码质量也会潜移默化影响我对这个人的评价，和对待他的态度。</p><h2 id="What-every-programmer-should-know-about-memory"><a href="#What-every-programmer-should-know-about-memory" class="headerlink" title="What every programmer should know about memory"></a><a href="https://www.akkadia.org/drepper/cpumemory.pdf" target="_blank" rel="external">What every programmer should know about memory</a></h2><p>挺长的，从偏硬件的角度讲解内存的原理。前面几章在各个 OS 教科书上都能找到，后面的内容就比较贴近现实，看着很有意思。</p><h2 id="The-Little-Manual-of-API-Design"><a href="#The-Little-Manual-of-API-Design" class="headerlink" title="The Little Manual of API Design"></a><a href="http://people.mpi-inf.mpg.de/~jblanche/api-design.pdf" target="_blank" rel="external">The Little Manual of API Design</a></h2><p>记得 GoogleTechTalk 里著名的一集 <a href="https://www.youtube.com/watch?v=aAb7hSCtvGw" target="_blank" rel="external">How To Design A Good API and Why it Matters</a> 么，这个 manual 可以看作那个 talk 的扩展读物。API Design 在程序设计中的重要性相比于架构不遑多让，看看这些 best practices 有益身心~~</p><h2 id="What-Powers-Instagram-Hundreds-of-Instances-Dozens-of-Technologies"><a href="#What-Powers-Instagram-Hundreds-of-Instances-Dozens-of-Technologies" class="headerlink" title="What Powers Instagram: Hundreds of Instances, Dozens of Technologies"></a><a href="http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances?utm_source=wanqu.co&amp;utm_campaign=Wanqu+Daily&amp;utm_medium=website" target="_blank" rel="external">What Powers Instagram: Hundreds of Instances, Dozens of Technologies</a></h2><p>一篇老文章，介绍 Instagram 早期时候（2012）的架构。我最喜欢这种早期架构的文章，看别人在高速增长期如何用快糙猛的方法解决问题。里面给的小部分技术在今天看来有些过时了，但大部分还很有借鉴意义。比如提到的 gunicorn 和 Fabric，是 Python  web 开发中的标配（还有 supervisor）；vmtouch （查了下发现是一个超级light weight的内存数据管理工具，代码也写的很棒）；Munin，Pingdom  监控，Sentry 报告错误。</p>]]></content>
    
    <summary type="html">
    
      一周笔记第三篇
    
    </summary>
    
    
      <category term="notes" scheme="http://wilbeibi.com/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>一周笔记</title>
    <link href="http://wilbeibi.com/2016/05/2016-05-21-weekly1/"/>
    <id>http://wilbeibi.com/2016/05/2016-05-21-weekly1/</id>
    <published>2016-05-21T07:00:00.000Z</published>
    <updated>2016-12-08T22:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第二周"><a href="#第二周" class="headerlink" title="第二周"></a>第二周</h2><p>这周 RSS 里没啥非常好的文章，就把以前的笔记里翻出来几篇凑数。</p><h2 id="Elevate-yourself-with-side-projects"><a href="#Elevate-yourself-with-side-projects" class="headerlink" title="Elevate yourself with side projects"></a><a href="https://slackhq.com/elevate-yourself-with-side-projects-acbc43229422#.12qjef3av" target="_blank" rel="external">Elevate yourself with side projects</a></h2><p>爱因斯坦的在专利局工作时候的 side project 是相对论论文，学校门卫波洛克（对，现代艺术甩泥点子那位）的 side project 是画画，Slack 一开始也是游戏公司的 side project 聊天工具。Side project 能真正有效促进一个人的专业进步（深有同感）。不是有句话说么，这年头在湾区没有一两个 side project 都不好意跟人打招呼。</p><h2 id="What-every-computer-science-major-should-know"><a href="#What-every-computer-science-major-should-know" class="headerlink" title="What every computer science major should know"></a><a href="http://matt.might.net/articles/what-cs-majors-should-know/" target="_blank" rel="external">What every computer science major should know</a></h2><p>压箱底的老文章。 知名博主 Matt Might的一篇长文，很详细的列出了一个合格的 CS 学生应该学习和掌握的知识，任何一个学 CS 的学生都应该看看这篇文章。</p><h2 id="Peer-Code-Reviews-At-Loose-Cannon"><a href="#Peer-Code-Reviews-At-Loose-Cannon" class="headerlink" title="Peer Code Reviews At Loose Cannon"></a><a href="http://scottbilas.com/blog/peer-code-reviews-at-loose-cannon/" target="_blank" rel="external">Peer Code Reviews At Loose Cannon</a></h2><p>技术博客大多谈的是如何学习新技术，如何设计架构，如何找工作，却很少谈如何正确的 Code Review 的。Code Review 在工作中非常重要，是有效的学习/分享知识，增进办公室人际关系的途径。这一系列文章就很详细的谈了如何 Code Review。附赠这篇 <a href="http://www.kevinlondon.com/2015/05/05/code-review-best-practices.html" target="_blank" rel="external">Code Review Best Practices</a>。</p><h2 id="香草冰淇淋，世界末日与烧鹿骨"><a href="#香草冰淇淋，世界末日与烧鹿骨" class="headerlink" title="香草冰淇淋，世界末日与烧鹿骨"></a><a href="http://chuansong.me/n/123723" target="_blank" rel="external">香草冰淇淋，世界末日与烧鹿骨</a></h2><p>这是一篇我很喜欢的非技术文章。从顾客离奇的投诉『新车会对香草冰淇淋过敏』说起，分析了一些显式因果关系和其背后看似荒诞的理性依据。原文链接已经失效，给的链接是别的网站转的。</p>]]></content>
    
    <summary type="html">
    
      一周笔记第二篇
    
    </summary>
    
    
      <category term="notes" scheme="http://wilbeibi.com/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>一周笔记</title>
    <link href="http://wilbeibi.com/2016/05/2016-05-16-weekly0/"/>
    <id>http://wilbeibi.com/2016/05/2016-05-16-weekly0/</id>
    <published>2016-05-16T07:00:00.000Z</published>
    <updated>2016-12-08T22:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是一周笔记"><a href="#什么是一周笔记" class="headerlink" title="什么是一周笔记"></a>什么是一周笔记</h2><p>这是经女朋友提醒，准备每周一篇，阅读的技术博客，文章等的简短评论，干货收集，读书感想及各种好玩的事儿。</p><h2 id="模仿-O’Reilly-风格插图"><a href="#模仿-O’Reilly-风格插图" class="headerlink" title="模仿 O’Reilly 风格插图"></a>模仿 O’Reilly 风格插图</h2><p>一直觉得O’Reilly书系的示意图简洁美观，希望写博客或者presentation的时候也能用，今天花时间查了下，字体用的是 Myriad，编程字体用的是 Ubuntu Mono，用 Keynote 画了几个简单的图形，供日后使用。</p><p><img src="http://i.imgur.com/Iqq2QFG.png" alt=""></p><h2 id="Questions-to-ask-your-interviewer"><a href="#Questions-to-ask-your-interviewer" class="headerlink" title="Questions to ask your interviewer"></a><a href="https://rkoutnik.com/articles/Questions-to-ask-your-interviewer.html" target="_blank" rel="external">Questions to ask your interviewer</a></h2><p>每次面试时候最后面试官都会问 “Do you have any questions?”，然后大多数人都只是问一些隔靴搔痒的问题，这篇文章比较深入的探讨这个问题，怎样让问面试官问题成为你的加分点，哪些问题能反映出这个公司的开发流程和工程师文化（关系到是否值得加入），面试必备的好问 （Victoria 同学翻译成了<a href="http://victoriahong.com/2016/05/question-to-ask-your-interviewer-translation/" target="_blank" rel="external">中文</a>）。</p><h2 id="Cron-best-practices"><a href="#Cron-best-practices" class="headerlink" title="Cron best practices"></a><a href="https://sanctum.geek.nz/arabesque/cron-best-practices/" target="_blank" rel="external">Cron best practices</a></h2><p>Cron通常用来每隔一段时间跑一个脚本，但大多数人都只是用来检查重启服务器或者备份。本文介绍了一些 Cron 的高级玩法，输出错误码，发送邮件，设置 timeout，等等。BTW，这个作者还有一些 Linux Crypto 的文章，也很值得一看。</p><h2 id="Choosing-a-Linux-Tracer"><a href="#Choosing-a-Linux-Tracer" class="headerlink" title="Choosing a Linux Tracer"></a><a href="http://www.brendangregg.com/blog/2015-07-08/choosing-a-linux-tracer.html" target="_blank" rel="external">Choosing a Linux Tracer</a></h2><p>介绍了一堆Performance monitoring &amp; tunning 的工具，来自 Netflix senior performance architect。我查 systemtap 的时候翻到这哥们的博客，发现此人文章很棒，然后和我们司的performance engineer 聊文章中的问题，发现这博主是他当年在 Sun 的同事 … …</p><h2 id="Latency-Numbers-Every-Programmer-Should-Know"><a href="#Latency-Numbers-Every-Programmer-Should-Know" class="headerlink" title="Latency Numbers Every Programmer Should Know"></a><a href="https://gist.github.com/jboner/2841832" target="_blank" rel="external">Latency Numbers Every Programmer Should Know</a></h2><p>这个介绍不同存储器性能的表格历史悠久，这个 gist 及其评论里很多人贡献了他们知道的相关的文档和视频，很多都很有意思。一些常用的还是很有必要背下来的（比如 CPU， 内存，硬盘， SSD 读取速度的倍数关系），对于初学编程的人能更好的了解 <a href="https://www.wikiwand.com/en/Locality_of_reference" target="_blank" rel="external">locality</a> 的重要性。</p><h2 id="保证分布式系统数据一致性的6种方案"><a href="#保证分布式系统数据一致性的6种方案" class="headerlink" title="保证分布式系统数据一致性的6种方案"></a><a href="http://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;mid=2653546976&amp;idx=1&amp;sn=c3fb2338389a41e7ab998c0c21bd3e5d&amp;scene=2&amp;srcid=0419sWSVDrJ1czLxPzOdEyak&amp;from=timeline&amp;isappinstalled=0#wechat_redirect" target="_blank" rel="external">保证分布式系统数据一致性的6种方案</a></h2><p>介绍了一些国内的案例，文末的链接也挺好的。</p><h2 id="浅谈-WHR-全历史排名"><a href="#浅谈-WHR-全历史排名" class="headerlink" title="浅谈 WHR 全历史排名"></a><a href="http://blog.codingnow.com/2016/03/whr.html#more" target="_blank" rel="external">浅谈 WHR 全历史排名</a></h2><p>云风的文章和他的代码一样，一向以信噪比高著称。这是一篇谈博弈中的打分算法问题的，文中谈到elo就是电影《社交网络》中 Eduardo 在窗户上写的公式。</p>]]></content>
    
    <summary type="html">
    
      一周笔记第一篇
    
    </summary>
    
    
      <category term="notes" scheme="http://wilbeibi.com/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>2016 年计划</title>
    <link href="http://wilbeibi.com/2016/01/plan/"/>
    <id>http://wilbeibi.com/2016/01/plan/</id>
    <published>2016-01-01T08:00:00.000Z</published>
    <updated>2016-12-08T22:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2016-新年计划"><a href="#2016-新年计划" class="headerlink" title="2016 新年计划"></a>2016 新年计划</h1><p>一如既往的，新年是要计划的，实不实现再两说。</p><h2 id="2015-的计划回顾"><a href="#2015-的计划回顾" class="headerlink" title="2015 的计划回顾"></a>2015 的计划回顾</h2><ul><li>第一条计划算实现了四成，八九月份找到工作了。</li><li>第二条读书计划，毫无疑问轻松达成。</li><li>第三条写博客计划，额，可耻地没做到。</li><li>第四条掌握 Haskell 计划，算是搞定了。</li><li>第五条计划，今年继续~~<h2 id="今年的计划"><a href="#今年的计划" class="headerlink" title="今年的计划"></a>今年的计划</h2></li><li>写一个有分量的开源项目，或者写个库放上 pypi 之类的。</li><li>学一门手艺，摄影，跑酷，弹贝斯，篆刻或者其他什么的。</li><li>健身。因为练的无氧，这不好量化。以后再加具体的目标。</li><li>读书就不列了，一直没撂下。写博客，一周至少一篇。</li><li>继续找女朋友~</li></ul>]]></content>
    
    <summary type="html">
    
      2016 新年计划
    
    </summary>
    
    
      <category term="writing" scheme="http://wilbeibi.com/tags/writing/"/>
    
  </entry>
  
  <entry>
    <title>找出编辑距离不大于 K 的单词</title>
    <link href="http://wilbeibi.com/2015/05/2015-05-09-K_edit_distances/"/>
    <id>http://wilbeibi.com/2015/05/2015-05-09-K_edit_distances/</id>
    <published>2015-05-09T07:00:00.000Z</published>
    <updated>2016-12-08T22:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于-edit-distance-的一道题"><a href="#关于-edit-distance-的一道题" class="headerlink" title="关于 edit distance 的一道题"></a>关于 edit distance 的一道题</h1><p>最近看到一个很有意思的面试题：给一个单词和一个字典，找出字典中所有和给定单词编辑距离不大于 k 的词。</p><p>一个常见的思路是遍历一遍，求单词和字典中每一项的编辑距离。我们知道编辑距离是二维 DP，时间复杂度为 $O(L^2)$，其中 L 为每个单词平均长度，则总时间复杂度为$O(NL^2)$， N 为字典中词的个数。</p><p>这个方法的问题在于，一旦查询单词变多，性能会很糟糕。基于<a href="http://www.zhihu.com/question/29592463" target="_blank" rel="external">知乎 Lee Shellay的回答</a>，可以通过构造 Trie， 结合 DFS，来解决这个问题。</p><p>所以算法思路并不难：  </p><ol><li>根据字典中的单词构造前缀树，标记每个单词结束时的结束符为 ’$’。  </li><li>设计函数 API 为<code>check_fuzzy(trie, word, path, tol)</code>。<code>trie</code>是在树中当前走到的节点，<code>word</code> 表示走到当前节点剩余需要处理的查询单词，<code>path</code>表示走到当前节点已经记录的字典单词前缀，<code>tol</code> 表示剩余可容忍的编辑距离。然后定义一个set，不断找到可能的单词并入这个set，直到结束。<br>所以，函数只在<code>tol</code> 为0时候终止（为什么不是<code>word</code>为空时候终止？因为有可用的编辑距离都用在增加后缀的情况）。  </li></ol><ul><li>匹配当前字符，有两种情况：匹配，那么直接递归下一层；不匹配，可能是字母不一致或者是 word 已经结束（这个情况很容易被忽略），需要 tol 减一后递归下一层。</li><li>增加任意字母（字典单词比查询单词多字母）。这里和知乎回答里的不一样，那里是枚举了26个字母，其实只要枚举当前 tree 的所有节点字母就行了（Jayxon 大牛想到的）。</li><li>删除字符。word 向后移一个字母，tol 减一。</li></ul><p>最后代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Based on Lee Shellay's code http://www.zhihu.com/question/29592463</span></span><br><span class="line"></span><br><span class="line">END = <span class="string">'$'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_trie</span><span class="params">(words)</span>:</span></span><br><span class="line">    trie = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">        t = trie</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> t:</span><br><span class="line">                t[c] = &#123;&#125;</span><br><span class="line">            t = t[c]</span><br><span class="line">        t[END] = &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> trie</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_fuzzy_v4</span><span class="params">(trie, word, path = <span class="string">''</span>, tol = <span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tol &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> set()</span><br><span class="line"></span><br><span class="line">    ps = set()</span><br><span class="line">    <span class="keyword">if</span> word == <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">if</span> END <span class="keyword">in</span> trie:</span><br><span class="line">             ps = &#123;path&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> trie:</span><br><span class="line">        <span class="comment"># match current or mark as substition</span></span><br><span class="line">        ps |= check_fuzzy_v4(trie[k], word[<span class="number">1</span>:], path+k, tol - (<span class="keyword">not</span> word <span class="keyword">or</span> k != word[<span class="number">0</span>]))</span><br><span class="line">        <span class="comment"># add random char</span></span><br><span class="line">        ps |= check_fuzzy_v4(trie[k], word, path+k, tol<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># delete one (if word is empty, word[2:] will not report error)</span></span><br><span class="line">    ps |= check_fuzzy_v4(trie, word[<span class="number">1</span>:], path, tol<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> ps</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    words = [<span class="string">'hello'</span>, <span class="string">'hela'</span>, <span class="string">'hel'</span>, <span class="string">'dokm'</span>, <span class="string">'i'</span>, <span class="string">'ke'</span>, <span class="string">'ik'</span>]</span><br><span class="line">    t = make_trie(words)</span><br><span class="line">    <span class="keyword">print</span> check_fuzzy_v4(t, <span class="string">'helo'</span>,<span class="string">''</span>, tol=<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><p>然后试试大一点的数据。我们知道在<code>/usr/share/dict/words</code>存着拼写检查的单词表，一共 2.4M 共 235886个单词（至少在我的 Mac 上是这么多）。可以用它来构造字典 <code>cat /usr/share/dict/words &gt; ./words.txt</code>。然后把一句话改的乱七八糟，用代码来跑跑试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    origin = <span class="string">"For you know only a heap of broken images"</span></span><br><span class="line">    modified = <span class="string">"Far your knn onlie a deep of borken iimaes"</span></span><br><span class="line"></span><br><span class="line">    words_list = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">'words.txt'</span>, <span class="string">'r'</span>)]</span><br><span class="line">    tree = make_trie(words_list)</span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> modified.split():</span><br><span class="line">        <span class="keyword">print</span> check_fuzzy_v4(tree, w, tol=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>结果也挺快的:</p><ul><li>CPython: 2.53s user 0.25s system 50% cpu 5.470 total</li><li>Pypy: 1.63s user 0.19s system 43% cpu 4.186 total</li></ul><p>就是这样,  喵~</p><p>PS: Lee Shellay回答又更新了，提升了性能和准确度，代码比我这的好，欢迎去看。</p>]]></content>
    
    <summary type="html">
    
      通过 Trie 提高搜索效率
    
    </summary>
    
    
      <category term="algorithms" scheme="http://wilbeibi.com/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Producer consumer problem in coroutine</title>
    <link href="http://wilbeibi.com/2015/03/2015-03-02-coroutine-producer-comsumer/"/>
    <id>http://wilbeibi.com/2015/03/2015-03-02-coroutine-producer-comsumer/</id>
    <published>2015-03-02T08:00:00.000Z</published>
    <updated>2016-12-08T22:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-coroutine"><a href="#What-is-coroutine" class="headerlink" title="What is coroutine"></a>What is coroutine</h2><p>As the name implies, coroutine refers to co-operative routine. It allows you to suspending and resuming execution at different locations. So, it’s essentially just context switching. Not surprisingly, coroutine is implemented in primitives like setjmp/longjump or ucontext in low level.</p><p>In many senarioes, coroutine is a more light-weight alternative of threads. For programming languages with GIL (like Python), coroutine would used to handle concurrency.</p><h2 id="Producer-and-consumer-problem"><a href="#Producer-and-consumer-problem" class="headerlink" title="Producer and consumer problem"></a>Producer and consumer problem</h2><p>Let’s take a look at classic “producer-consumer” problem. At each time, one coroutine produce products and add them into queue, the other coroutine take products from queue and use it (hmm, sounds like video buffering, right?). </p><p>The code below assumes you already have some knowledge of generator.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coroutine</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="comment"># A wrapper to convert function into generator</span></span><br><span class="line">    <span class="comment"># From David Beazley</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        cr = func(*args,**kwargs)</span><br><span class="line">        cr.next()</span><br><span class="line">        <span class="keyword">return</span> cr</span><br><span class="line">    <span class="keyword">return</span> start  </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(target)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        data = random.randint(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"# producer: sending data &#123;&#125;"</span>.format(data))</span><br><span class="line">        target.send(data)</span><br><span class="line">        </span><br><span class="line"><span class="meta">@coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data = <span class="keyword">yield</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"# consumer: receving data &#123;&#125;"</span>.format(data))</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    g_consumer = consumer()</span><br><span class="line">    producer(g_consumer)</span><br></pre></td></tr></table></figure></p><p>Simple enough, <code>send()</code> is a built-in function of generator. The producer send data to consumer, consumer receives data from <code>yield</code>.</p><h2 id="Coroutine-usage"><a href="#Coroutine-usage" class="headerlink" title="Coroutine usage"></a>Coroutine usage</h2><p>Yes, the famous concurrency library gevent is based on coroutine.</p><h2 id="Reference-and-Recommended-Reading"><a href="#Reference-and-Recommended-Reading" class="headerlink" title="Reference and Recommended Reading:"></a>Reference and Recommended Reading:</h2><p><a href="https://www.python.org/dev/peps/pep-0342/" target="_blank" rel="external">PEP 342: Coroutines via Enhanced Generators</a></p><p><a href="http://coolshell.cn/articles/10975.html" target="_blank" rel="external">一个“蝇量级” C 语言协程库</a></p><p><a href="http://learn-gevent-socketio.readthedocs.org/en/latest/general_concepts.html" target="_blank" rel="external">General concepts: concurrency, parallelism, threads and processes</a></p><p><a href="http://www.dabeaz.com/coroutines/" target="_blank" rel="external">A Curious Course on Coroutines and Concurrency</a></p>]]></content>
    
    <summary type="html">
    
      what coroutine is and a sample code of producer consumer problem.
    
    </summary>
    
    
      <category term="python" scheme="http://wilbeibi.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Colorizing Loggers -- A simple practice of decorator</title>
    <link href="http://wilbeibi.com/2015/02/2015-02-17-colorize-log/"/>
    <id>http://wilbeibi.com/2015/02/2015-02-17-colorize-log/</id>
    <published>2015-02-18T08:00:00.000Z</published>
    <updated>2016-12-08T22:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-this-post-about"><a href="#What-is-this-post-about" class="headerlink" title="What is this post about"></a>What is this post about</h2><p>Many people believe that decorator is one of the obscure concepts in Python.<br>Trust me, it is not. To be short, <strong>a decorator is a function that modifies other<br>functions via closures.</strong></p><p>They are plenty detailed articles about what decorator it is so there is no need to write one more. If you are not familiar with it, you may want to check these:</p><ul><li><p><a href="http://sahandsaba.com/python-decorators.html" target="_blank" rel="external">A Study of Python’s More Advanced Features Part II: Closures, Decorators and functools</a></p></li><li><p><a href="https://realpython.com/blog/python/primer-on-python-decorators/#.UvQEs0JdUwJ" target="_blank" rel="external">Primer on Python Decorators</a></p></li></ul><p>In this article, I am going to use a simple but interesting example to show</p><ul><li>how to colorize the output in command line</li><li>how to implement a switch case in Python (Python does not have built-in switch case)</li><li>a decorator with parameters</li></ul><p>OK, let’s rock.</p><h2 id="colorize-your-text"><a href="#colorize-your-text" class="headerlink" title="colorize your text"></a>colorize your text</h2><p>There is a set of escape sequences used to change the color of texts. So if we want to colorize a sentence, we just need to put the sentence between the color escape sequence and reset escape sequence. For example:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; ORANGE = <span class="string">'\033[33m'</span></span><br><span class="line">&gt;&gt; RED = <span class="string">'\033[31m'</span></span><br><span class="line">&gt;&gt; GREEN = <span class="string">'\033[32m'</span></span><br><span class="line">&gt;&gt; BLUE = <span class="string">'\033[34m'</span></span><br><span class="line">&gt;&gt; RESET = <span class="string">'\033[0m'</span></span><br><span class="line">&gt;&gt; <span class="keyword">print</span> ORANGE + <span class="string">"Chinese New Year"</span> + RESET</span><br><span class="line">&gt;&gt; <span class="keyword">print</span> GREEN + <span class="string">"Chinese"</span> + GREEN + <span class="string">"New"</span> + BLUE + <span class="string">"Year"</span> + RESET</span><br></pre></td></tr></table></figure></p><p>You will see</p><font style="font-family: courier;" color="orange">Chinese New Year</font><p>and</p><font style="font-family: courier;" color="red">Chinese </font><font style="font-family: courier;" color="green">New </font><font style="font-family: courier;" color="blue">Year</font><h2 id="How-to-choose-the-color-in-code"><a href="#How-to-choose-the-color-in-code" class="headerlink" title="How to choose the color in code"></a>How to choose the color in code</h2><p>As I said, Python does not support switch case. So we cannot switch the color name and choose the corresponding escaped sequence. Fortunately, dictionary would do the work.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getColor</span><span class="params">(color)</span>:</span></span><br><span class="line">    <span class="comment"># @param color: string like "red" or "yellow"</span></span><br><span class="line">    <span class="comment"># @return the corresponding escape sequence.</span></span><br><span class="line">    <span class="comment"># If not valid, return empty string</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    RED = <span class="string">'\033[31m'</span>,</span><br><span class="line">    GREEN = <span class="string">'\033[32m'</span>,</span><br><span class="line">    BLUE = <span class="string">'\033[34m'</span>,</span><br><span class="line">    <span class="comment"># and more ...</span></span><br><span class="line">    ORANGE = <span class="string">'\033[33m'</span></span><br><span class="line">    &#125;.get(color, <span class="string">""</span>)</span><br></pre></td></tr></table></figure><p>The trick is, the dictionary’s built in <code>get</code> method. The first parameter here is key, the second optional parameter is default. As the docstring shows:</p><blockquote><p>D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None.</p></blockquote><h2 id="Use-the-decorator"><a href="#Use-the-decorator" class="headerlink" title="Use the decorator"></a>Use the decorator</h2><p>Suppose we have a function to implement a task. It may has three kind of return string, if task is completed successfully, it returns “SUCCESS: blah blah …”, if the task is finished but we cannot ensure it’s corretness, it returns “WARNING: blah blah …”, if task failed, returns “ERROR: blah blah …”, how do we colorize these return strings?</p><p><a href="https://gist.github.com/Wilbeibi/a2ac59f211bcd681d007" target="_blank" rel="external">Raw code</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">colorize</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getColor</span><span class="params">(color)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'black'</span> : <span class="string">'\033[30m'</span>,</span><br><span class="line">            <span class="string">'red'</span> : <span class="string">'\033[31m'</span>,</span><br><span class="line">            <span class="string">'green'</span> : <span class="string">'\033[32m'</span>,</span><br><span class="line">            <span class="string">'orange'</span> : <span class="string">'\033[33m'</span>,</span><br><span class="line">            <span class="string">'blue'</span> : <span class="string">'\033[34m'</span>,</span><br><span class="line">            <span class="string">'purple'</span> : <span class="string">'\033[35m'</span>,</span><br><span class="line">            <span class="string">'cyan'</span> : <span class="string">'\033[36m'</span>,</span><br><span class="line">            <span class="string">'light_grey'</span> : <span class="string">'\033[37m'</span></span><br><span class="line">        &#125;.get(color, <span class="string">""</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_colorize</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">            RESET = <span class="string">'\033[0m'</span></span><br><span class="line">            text = func()</span><br><span class="line">            <span class="comment">#if not isinstance(text, basestring):</span></span><br><span class="line">            <span class="comment">#    text = str(text)</span></span><br><span class="line">            level = text.split(<span class="string">':'</span>, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">            color = &#123;</span><br><span class="line">                <span class="string">'SUCCESS'</span>: args[<span class="number">0</span>],</span><br><span class="line">                <span class="string">'WARNING'</span>: args[<span class="number">1</span>],</span><br><span class="line">                <span class="string">'ERROR'</span>: args[<span class="number">2</span>]</span><br><span class="line">            &#125;.get(level, <span class="string">''</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&#123;0&#125;&#123;1&#125;&#123;2&#125;"</span>.format(getColor(color), text, RESET)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> _colorize</span><br><span class="line"></span><br><span class="line"><span class="meta">@colorize("green", "orange", "red")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_task</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># working working ....</span></span><br><span class="line">    <span class="keyword">if</span> (success):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"SUCCESS: Yeah~~"</span></span><br><span class="line">    <span class="keyword">elif</span> (warning):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"WARNING: wait, what?"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ERROR: something went wrong here."</span></span><br></pre></td></tr></table></figure></p><p>As you can tell, to make the decorator with parameters, we need to put it in another decorator.</p><p>Decorator are often used as cache, profiler, logger, synchronization(acquire lock, drop lock) and so forth. One of my favourite library <a href="http://click.pocoo.org/3/" target="_blank" rel="external">Click</a> is also a wonderful example.</p><p>Happy Chinese New Year ~</p>]]></content>
    
    <summary type="html">
    
      colorize text, use dictionary as switch case, decorator with parameters
    
    </summary>
    
    
      <category term="python" scheme="http://wilbeibi.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>How to delete nodes of linked list with pointers-to-pointers (Chinese)</title>
    <link href="http://wilbeibi.com/2015/02/2015-02-12-2D-pointer/"/>
    <id>http://wilbeibi.com/2015/02/2015-02-12-2D-pointer/</id>
    <published>2015-02-12T08:00:00.000Z</published>
    <updated>2016-12-08T22:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>我在用C++写 Leetcode中 Remove duplicates from linked list II 一题时，看到别人的一份代码，感觉写法很有趣，细细研究了一下。受益不少。</p><p>在大部分链表题中，我们习惯于创建一个空节点dummy，使之指向链表的头结点，以方便对<br>第一个节点进行操作（比如，删除它）。最后答案返回dummy.next。比较有节操的同学会在<br>删除链表的某些节点时用delete，以免内存泄露，但是难道就没有考虑过dummy节点感受么？</p><p>使用一个二维指针，可以优雅的解决了这个问题。</p><p>举个简单的🌰：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Suppose we have a linked list "1-&gt;2-&gt;3", we want to delete the    </span></span><br><span class="line"><span class="comment"> * second node, remains "1-&gt;3".</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">ListNode **p = &amp;head, *succ;</span><br><span class="line">p = &amp;(*p)-&gt;next;</span><br><span class="line">succ = (*p)-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> (*p);</span><br><span class="line">(*p) = succ;</span><br></pre></td></tr></table></figure><p>尝试解释一下下。<code>p</code>是一个二级指针，也就是说，在一开始，<code>p</code>是一个指向一个指向<code>head</code>指针的指针（也就是<code>(*p)</code>指向<code>head</code>）。这样的好处就是，当我们需要在某一个时刻删除指向的节点（<code>delete *p</code>操作），p本身不受影响（当然，是p指向的指针所对应的内存空间被释放了）。唯一一点不方便的时，其他每次移动的时候，都要用<code>(*p)</code>（p淡淡的看着他指向的指针往后移。）</p><p>和用dummy解法不同的是，dummy解法指针后移是<code>ptr = ptr-&gt;next;</code>。那我们这呢？<code>(*p) = (*p)-&gt;next;</code>？这样是错的。比如<code>1-&gt;2</code>里从<code>1</code>移动到<code>2</code>的过程中，就把节点<code>1</code>修改了。所以，要移动的是p。即为<code>p = &amp;(*p)-&gt;next</code>，其中<code>-&gt;</code>的优先级是高于<code>&amp;</code>的，把p赋值为<code>(*p)-&gt;</code>的地址，所以现在<code>(*p)</code>指向老<code>(*p)</code>的next。</p><p>另一个大家可能关心的问题，在<code>delete (*p)</code>后，<code>(*p)</code>的前驱节点的next是怎么不找丢的呀？这其实涉及到<code>delete</code>的本质（Stackoverflow对这个问题有个不错的<a href="http://stackoverflow.com/a/11603084/1035859" target="_blank" rel="external">回答</a>）。当我们调用<code>delete</code>的时候，那块内存里的数据其实并没有消失，只是这块内存地址被标记为可以利用，当之后的程序需要new的时候，才有可能覆盖掉这里的数据。就像爱情，没有一段新的覆盖，老的怎么忘的掉（情人节了还在改博客，唉~~）。所以这个代码严格意义上说是由风险的，如果在delete的一瞬间，正好另一个程序/进程new了一块内存，又刚好是这里，这个方法就废了。fix的方法就是delete前，赋给一个临时变量，把next覆盖当前，再delete临时变量。</p><p>修改的过程中，发现陈皓也写过<a href="http://coolshell.cn/articles/8990.html" target="_blank" rel="external">类似的文章</a>，这个trick被Linus举例为什么才是core low-level coding，真正懂指针的做法。 他的文章还有配图，如果我表述的还是没让大家理解，推荐去读一下。</p><p>PS：《Pointers In C》的第十二章《Using Structures and Pointers》，也有关于指针链表操作的详细解释。</p><p><img src="http://ecx.images-amazon.com/images/I/51A8TNWQ3BL.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      算法题中如何用二级指针简化代码
    
    </summary>
    
    
      <category term="algorithms" scheme="http://wilbeibi.com/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>我为什么要编程</title>
    <link href="http://wilbeibi.com/2015/02/2015-02-06-whyiwrite/"/>
    <id>http://wilbeibi.com/2015/02/2015-02-06-whyiwrite/</id>
    <published>2015-02-06T08:00:00.000Z</published>
    <updated>2016-12-08T22:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>王小波和乔治奥威尔都曾以《我为什么要写作》为题写过他们的走上作家之路原因。对于这个问题，王小波借用了一位登山家的回答，“因为山在那儿。” （如你所知，那位登山家最后也确实在珠峰上挂掉了。）乔治奥威尔的回答则显得更有条理：纯粹的个人主义，美学热枕，历史责任感和政治目的。</p><p>你看，程序员界就很少有这么高的境界，去中关村随便抓个程序员，问他为什么编程，他就绝不会回答 “为公司立心，为开源立命，为community开太平”。当然，也有一些身怀抱负的有为青年（比如我），会不时纠结于这个问题。比如最近，我就为自己的志大才疏感到无比痛苦。成功学那些骗小孩儿的早就免疫了，得靠一些真实的数据来打鸡血。</p><p>首先，优秀的技术大牛是什么样的？我把我RSS订阅里的中文技术博客博主的信息都翻了一遍，统计出了一些有趣的东西：</p><ul><li>2/3的大牛来自top20的学校，他们中不少人在读PhD。</li><li>至少一半的人大学前就开始接触编程。</li><li>15% 左右的人在海外留学或者工作，基本全部来自第一项的top20学校中。</li><li>在国内工作的中有四个都是在阿里。</li><li>貌似全部都用Mac。</li><li>30% 以上的人有优异的数学（参加过中学数学竞赛等）或者算法（ACM, OI）背景。</li><li>大部分人都有相当不错的文字功底，写作能力和阅读量都不赖。</li><li>他们大多数至少在国外技术博文翻译、Linux及开源、函数式编程、算法这四项中沾一样（这项可能是我口味问题，订阅有偏向性）。</li><li>30岁以上的人中，有不少是非计算机专业的。30岁以下的，基本都是CS科班出身。</li></ul><p>所以，我还不是完全没有机会的。我之所以喜欢这一行，就是因为这一行的聪明人太多了，勤奋的人太多了，这让我很有压力，这种压力很爽。</p><p>正如莱蒙托夫在的那首小诗《帆》：</p><p>在大海的深蓝色的云雾里，<br>一只孤独的帆儿闪着白光。<br>它在寻求什么，在那遥远的异地？<br>它抛下了什么，在那自己的故乡？<br>波涛在汹涌着，海风在呼啸着，<br>桅杆弓起腰来发出扎扎的声响。<br>不，它不是在寻求幸福，<br>它也不是在逃避幸福！<br>它下面是碧色的澄清的水流，<br>它上面是金色的太阳，<br>而它，不安地，在祈求着风暴，<br>仿佛是在风暴中才有安详。 </p>]]></content>
    
    <summary type="html">
    
      关键时刻的一点鸡血
    
    </summary>
    
    
      <category term="writing" scheme="http://wilbeibi.com/tags/writing/"/>
    
  </entry>
  
  <entry>
    <title>2015 年部分计划</title>
    <link href="http://wilbeibi.com/2015/01/2015-01-27-plan/"/>
    <id>http://wilbeibi.com/2015/01/2015-01-27-plan/</id>
    <published>2015-01-27T08:00:00.000Z</published>
    <updated>2016-12-08T22:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2015-小部分计划"><a href="#2015-小部分计划" class="headerlink" title="2015 小部分计划"></a>2015 小部分计划</h2><p>2015年都过了一个月了。现在才开始写新年计划有点晚了，可晚比没有强。<br>规划一年是个很难的事儿，所以我就先计划一小部分，并附上deadline<br>（deadline driven development 是最有生产力的）。</p><ul><li>二月底至三月，拿到offer，希望大厂收留，这是今年，甚至是这几年最大的事儿。</li><li>读书，Peter Thiel 的 《Zero To One》， 王兴推荐的《Resource Revoution》, 朴灵大大的《深入浅出Nodejs》，还有王力的《中国古代文化常识》。</li><li>写博客，博客至少一周两更。不管是写技术还是什么乱七八糟的。</li><li>掌握Haskell的Monad。</li><li>最后一条，希望。。。唉，看缘分吧，现在时间是有了，再也没什么欺骗自己的借口了。<br>（说的好像有妹子看我博客一样，噗~）</li></ul><p>暂时就想到这么多，wilbeibi，加油！</p>]]></content>
    
    <summary type="html">
    
      新年计划及其他
    
    </summary>
    
    
      <category term="writing" scheme="http://wilbeibi.com/tags/writing/"/>
    
  </entry>
  
  <entry>
    <title>A Primer to System Administration - About SSH</title>
    <link href="http://wilbeibi.com/2014/08/2014-08-29-SysAdmin3/"/>
    <id>http://wilbeibi.com/2014/08/2014-08-29-SysAdmin3/</id>
    <published>2014-08-29T07:00:00.000Z</published>
    <updated>2016-12-08T22:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>When we talk about SSH, we are usually referring to OpenSSH - a FREE version of the SSH connectivity tools. As their official website said:</p><blockquote><p>OpenSSH encrypts all traffic (including passwords) to effectively eliminate eavesdropping, connection hijacking, and other attacks. Additionally, OpenSSH provides secure tunneling capabilities and several authentication methods, and supports all SSH protocol versions.</p></blockquote><p><img src="http://www.openssh.com/images/openssh.gif" alt=""></p><p>And I believe <code>ssh</code> is one of the most used commands for programmers (Windows users, you have putty, that’s … not bad). In this post I am going to list some most basic usage of <code>ssh</code>.</p><h2 id="How-to-generate-key-pair"><a href="#How-to-generate-key-pair" class="headerlink" title="How to generate key pair?"></a>How to generate key pair?</h2><p>They are two ways to identify users: via password and via key pair. The latter one is <a href="http://en.wikipedia.org/wiki/Public-key_cryptography" target="_blank" rel="external">more secure</a>. We can generate a key pair through:</p><pre><code>$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;# Creates a new ssh key, using the provided email as a labelGenerating public/private rsa key pair.# Enter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]</code></pre><p>where <code>-t</code> stands for encryption type, <code>-C</code> for comment. Then choose a strong passphrase (in case of your rsa keys being stolen). Now, you will see id_rsa (private key) and id_rsa.pub (public key)in your <code>~/.ssh/</code> directory(Don’t let others know your private key).<br>At last, add your key to <code>ssh-agent</code>(a keys management tool):</p><pre><code>eval &quot;$(ssh-agent -s)&quot;ssh-add ~/.ssh/id_rsa</code></pre><h2 id="How-to-SSH-login-without-authentication"><a href="#How-to-SSH-login-without-authentication" class="headerlink" title="How to SSH login without authentication?"></a>How to SSH login without authentication?</h2><p>Now it’s time use our public key. For Linux user:</p><pre><code>ssh-copy-id user@machine</code></pre><p>For Mac user, we can either <code>brew install ssh-copy-id</code> to install and use this command or <a href="http://askubuntu.com/questions/46424/adding-ssh-keys-to-authorized-keys" target="_blank" rel="external">typing</a>:</p><pre><code>cat ~/.ssh/id_rsa.pub | ssh user@machine &quot;mkdir ~/.ssh; cat &gt;&gt; ~/.ssh/authorized_keys&quot;</code></pre><p>As you can tell, actually what we are doing here is copy the content of id_rsa.pub to server’s <code>~/.ssh/authorized_keys</code>.</p><h2 id="Make-an-alias-of-the-connection"><a href="#Make-an-alias-of-the-connection" class="headerlink" title="Make an alias of the connection"></a>Make an alias of the connection</h2><p>Laziness is a great virtue of a programmer. Add these to local <code>~/.ssh/config</code> (create if not exist) to simplify your life:</p><pre><code>Host matrix     HostName &lt;domain name or public IP&gt;     User &lt;user name&gt;     IdentityFile &lt;/path/to/private_key&gt;</code></pre><p>One more thing, ssh config support wildcard, so you can use </p><pre><code>Host *compute-1.amazonaws.com</code></pre><p>for all your ec2 instances. I also added</p><pre><code>TCPKeepAlive=yesServerAliveInterval=15    ServerAliveCountMax=6StrictHostKeyChecking=noCompression=yesForwardAgent=yesRSAAuthentication=yesPasswordAuthentication=yes</code></pre><p>in my config file to add more feature.</p><h2 id="About-security"><a href="#About-security" class="headerlink" title="About security"></a>About security</h2><ol><li>Always set passphrase, or it might be <a href="https://www.netspi.com/blog/entryid/235/stealing-unencrypted-ssh-agent-keys-from-memory" target="_blank" rel="external">stolen from memory</a>.</li><li>Maybe, use another port instead of 22 is a good idea (Check this: <a href="https://major.io/2013/05/14/changing-your-ssh-servers-port-from-the-default-is-it-worth-it/" target="_blank" rel="external">Changing your ssh server’s port from the default: Is it worth it?</a>)</li></ol>]]></content>
    
    <summary type="html">
    
      Basic usages of ssh. Tested on Mac OSX 10.9.4, OpenSSH_6.2p2
    
    </summary>
    
    
      <category term="Sysadmin" scheme="http://wilbeibi.com/tags/Sysadmin/"/>
    
  </entry>
  
  <entry>
    <title>A Primer to System Administration - Know Thy System</title>
    <link href="http://wilbeibi.com/2014/08/2014-08-10-SysAdmin2/"/>
    <id>http://wilbeibi.com/2014/08/2014-08-10-SysAdmin2/</id>
    <published>2014-08-10T07:00:00.000Z</published>
    <updated>2016-12-08T22:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="General-information"><a href="#General-information" class="headerlink" title="General information"></a>General information</h2><ol><li><p>Use <code>uname</code> to get system information:</p><p> uname -a</p><p><code>-a</code> for print all the information.</p></li></ol><h2 id="CPU-information"><a href="#CPU-information" class="headerlink" title="CPU information"></a>CPU information</h2><ol><li>Use <code>nproc</code> to print the number of processing units available (GNU coreutils):</li></ol><pre><code>$ nproc4</code></pre><ol><li>Use <code>lscpu</code> to display CPU architecture information (util-linux).</li></ol><h2 id="Disk-information"><a href="#Disk-information" class="headerlink" title="Disk information"></a>Disk information</h2><ol><li><code>df</code> is a powerful command for displaying system disk.</li></ol><pre><code>df -h /path/to/directory</code></pre><ol><li><code>cat /proc/partitions/</code> and <code>cat /proc/mounts</code> are also pretty handly solutions to check the partitions and mount disks.</li></ol><h2 id="Memory-information"><a href="#Memory-information" class="headerlink" title="Memory information"></a>Memory information</h2><ol><li><p>Just as same as disk, <code>cat /proc/meminfo</code> could easily check memory information (Thanks to Unix’s <a href="http://en.wikipedia.org/wiki/Everything_is_a_file" target="_blank" rel="external"><strong>Everything is a file</strong></a> design concept).</p></li><li><p>Alternatively, you can type <code>free -m</code>, which essentially is the same as check /meminfo. <code>-m</code> for display in megabytes (as you expected, -g for gigabytes, -k for kilobytes.)</p></li></ol><h2 id="User-activity-information"><a href="#User-activity-information" class="headerlink" title="User activity information"></a>User activity information</h2><ol><li><code>last</code> command will display user’s info like terminal, time, date and so forth. To check one specific user’s activity, <code>last username</code> is what you are looking for.</li></ol><ol><li><p><code>w</code> is a great but rarely know command. It will display who is logged on and what they are doing. It’ll show username, terminal, from IP, login time, idle time, JCPU and the  command line of their current process. If you never heard it before, I strongly suggest you to have a try.</p></li><li><p><code>uptime</code>: Tell how long the system has been running.</p></li><li><p><code>ps</code>: a well known command for checking current processes, for instance, to list all zombie process:</p><pre><code>ps aux | awk &apos;{ print $8 &quot; &quot; $2 }&apos; | grep -w Z</code></pre><p> where <code>ps aux</code> to show processes for <strong>a</strong>ll users, the process’s <strong>u</strong>ser, and also show the processes not attached to a terminal (check man page for more details), then awk to filter the <code>STAT</code> and PID field, use grep to select the line contains <code>Z</code>(Zombie), now we get zombie processes pids. It’s easy to kill them by <code>kill -9 {PID}</code>.</p></li></ol><ol><li><code>top/htop</code>: Better not to use non-builtin command(for security reasons), but if you do want to, <code>htop</code> is a superior alternative to <code>top</code> – dynamically display current tasks.</li></ol><h2 id="Network-information"><a href="#Network-information" class="headerlink" title="Network information"></a>Network information</h2><ol><li><p>To get your own public IP, both <code>curl icanhazip.com</code> or <code>curl ifconfig.me</code> are easy ways to do that(previous one is much faster).</p></li><li><p><code>ping</code>: Even my mother knows to use <code>ping</code> to check network connectivity.</p></li><li><p><code>ifconfig</code>: A frequently used tool to view network interface information. BTW, I wrote a <a href="https://github.com/Wilbeibi/Ifconfig-extractor" target="_blank" rel="external">script</a> to filter IP, MAC addresses and networks from <code>ifconfig</code> (tested on Ubuntu, Fedora, OmniOS and FreeBSD).</p></li><li><p><code>lsof</code>, aka list open files, is definitely a swiss army knife for analyzing network. <code>lsof -i</code> for list all open Internet and X.25 network files. (The examples below are from Daniel Miessler’s blog, see reference)</p><pre><code>lsof -iTCP # Show only TCP connectionslsof -i:80 # Show networking only relate to port 80lsof -i@107.170.181.47 # Show connections with particular IPlsof -u username # Show given user&apos;s connectionslsof -u ^username # Show connections except given user</code></pre></li></ol><ol><li><code>ss -s</code>: display Currently Established, Closed, Orphaned and Waiting TCP sockets</li></ol><h2 id="You-may-Also-interested-in"><a href="#You-may-Also-interested-in" class="headerlink" title="You may Also interested in"></a>You may Also interested in</h2><ol><li>My previous post <a href="http://wilbeibi.com/2014/08/2014-08-08-SysAdmin/">A Primer to System Administration - Users and groups</a></li><li>If you found any grammar misusage or typos, please help me correct by <a href="https://github.com/Wilbeibi/wilbeibi_blog_src/blob/master/source/_posts/2014-08-10-SysAdmin2.md" target="_blank" rel="external">pull request here</a>.</li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://www.douban.com/note/265207425/" target="_blank" rel="external">nodejs 部署最佳实践 by 邻家 柠檬叔</a></p><p><a href="http://www.tecmint.com/useful-linux-commands-for-system-administrators/" target="_blank" rel="external">30 Useful Linux Commands for System Administrators</a></p><p><a href="http://unix.stackexchange.com/questions/106847/what-does-aux-mean-in-ps-aux" target="_blank" rel="external">What does aux mean in <code>ps aux</code>?</a></p><p><a href="http://www.cyberciti.biz/tips/killing-zombie-process.html" target="_blank" rel="external">Killing zombie process</a></p><p><a href="http://danielmiessler.com/study/lsof/" target="_blank" rel="external">An lsof Primer</a></p><p><a href="http://www.cyberciti.biz/faq/check-network-connection-linux/" target="_blank" rel="external">Linux: Check Network Connection Command</a></p>]]></content>
    
    <summary type="html">
    
      A collection of commands for checking system information and performance. Tested on Ubuntu 14.04.
    
    </summary>
    
    
      <category term="Sysadmin" scheme="http://wilbeibi.com/tags/Sysadmin/"/>
    
  </entry>
  
  <entry>
    <title>A Primer to System Administration - Users and groups</title>
    <link href="http://wilbeibi.com/2014/08/2014-08-08-SysAdmin/"/>
    <id>http://wilbeibi.com/2014/08/2014-08-08-SysAdmin/</id>
    <published>2014-08-08T07:00:00.000Z</published>
    <updated>2016-12-08T22:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="How-to-create-a-user"><a href="#How-to-create-a-user" class="headerlink" title="How to create a user"></a>How to create a user</h2><p>By useradd:</p><pre><code>useradd -m -d &lt;HomeDir&gt; -g &lt;Group&gt; username</code></pre><p>It’s optional to specify the new user’s home directory and group, but I strongly suggest to do so. <code>-m</code> stands for create home, <code>-d</code> to allocate a directory. (Warning, don’t mess up <code>useradd</code> and <code>adduser</code>, the later one is a higher level’s implementation. Here is a <a href="http://askubuntu.com/questions/345974/what-is-the-difference-between-adduser-and-useradd" target="_blank" rel="external">detailed explanation of these two’s differences</a>.)</p><h2 id="How-to-create-a-group"><a href="#How-to-create-a-group" class="headerlink" title="How to create a group"></a>How to create a group</h2><p>By groupadd:</p><pre><code>groupadd groupname</code></pre><h2 id="How-to-add-a-user-to-a-group"><a href="#How-to-add-a-user-to-a-group" class="headerlink" title="How to add a user to a group"></a>How to add a user to a group</h2><p>By usermod:<br>    usermod -a -G <groupname> username</groupname></p><p>where <code>usermod</code> means modify a user account, <code>-a</code> stands for append, append this user to a group.</p><p><a href="http://www.cyberciti.biz/faq/howto-linux-add-user-to-group/" target="_blank" rel="external">Read more</a></p><h2 id="How-to-list-all-users-in-a-group"><a href="#How-to-list-all-users-in-a-group" class="headerlink" title="How to list all users in a group"></a>How to list all users in a group</h2><p>Well, there is not such a built-in command for that, but we can use:</p><pre><code>grep &apos;^groupname&apos; /etc/group</code></pre><p>or <code>apt-get install members</code>, then</p><pre><code>members groupname</code></pre><h2 id="What-is-sticky-bit"><a href="#What-is-sticky-bit" class="headerlink" title="What is sticky bit"></a>What is sticky bit</h2><h3 id="What-is-sticky-bit-looks-like"><a href="#What-is-sticky-bit-looks-like" class="headerlink" title="What is sticky bit looks like"></a>What is sticky bit looks like</h3><p>Sticky bit is used for directories. As wikipedia said:</p><blockquote><p>When the sticky bit is set, only the item’s owner, the directory’s owner, or root can rename or delete files. Without the sticky bit set, any user with write and execute permissions for the directory can rename or delete contained files, regardless of owner.</p></blockquote><p>For example, if the professor create a /homework directory with sticky bit, every student can upload their homework, but they cannot rename or delete other students’ homework.</p><h3 id="How-to-set-it"><a href="#How-to-set-it" class="headerlink" title="How to set it"></a>How to set it</h3><pre><code>chmod +t /path/to/directory</code></pre><p>or</p><pre><code>chmod 1755</code></pre><p>where 1 stands for sticky bit, 7 for owner has all privilege, 5 for read and execute privilege for the group, and for others.</p><p>Now, /path/to/directory should looks like this (replaced last character):</p><pre><code>drwxr-xr-t   1 root     other          0 Nov 10 12:57 test</code></pre><p>As wikipedia said, if the sticky-bit is set on the directory without the execution bit set for the others category, it is indicated with a capital T:</p><pre><code>drwxr-xr-T   1 root     other          0 Nov 10 12:57 test</code></pre><p><a href="http://www.linuxnix.com/2012/01/sticky-bit-set-linux.html" target="_blank" rel="external">Read more …</a></p><h2 id="What-is-setuid"><a href="#What-is-setuid" class="headerlink" title="What is setuid"></a>What is setuid</h2><p>One sentence explanation: Regardless of who runs this program, run it as the user who owns it, not the user that executes it.</p><h3 id="How-to-set-it-1"><a href="#How-to-set-it-1" class="headerlink" title="How to set it"></a>How to set it</h3><pre><code>chmod u+s /path/to/file</code></pre><h3 id="And-it-is-dangerous"><a href="#And-it-is-dangerous" class="headerlink" title="And it is dangerous"></a>And it is dangerous</h3><p>For instance, a simple shell script <code>showfile.sh</code> has set setuid as root privilege:</p><pre><code>#!/bin/sh# showfilels -l | sort</code></pre><p>And If I am a bad guy, I could easily write script :</p><pre><code>rm -rf /some/where/important</code></pre><p>and saved as name <code>ls</code>, add my <code>ls</code> to the front of $PATH. Now when I tried to run showfile.sh, Boom ! The files are deleted.</p><h2 id="BTW"><a href="#BTW" class="headerlink" title="BTW"></a>BTW</h2><p>If you found grammar errors or typos, please feel free to help me <a href="https://github.com/Wilbeibi/wilbeibi_blog_src/edit/master/source/_posts/2014-08-08-SysAdmin.md" target="_blank" rel="external">correct it</a>.</p>]]></content>
    
    <summary type="html">
    
      Just some examples, no big deal. Tested on Ubuntu 14.04.
    
    </summary>
    
    
      <category term="Sysadmin" scheme="http://wilbeibi.com/tags/Sysadmin/"/>
    
  </entry>
  
  <entry>
    <title>How to deal with Git A-Z?</title>
    <link href="http://wilbeibi.com/2014/07/2014-7-21-gitAtoZ/"/>
    <id>http://wilbeibi.com/2014/07/2014-7-21-gitAtoZ/</id>
    <published>2014-07-22T07:00:00.000Z</published>
    <updated>2016-12-08T22:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>In this post I am going to show you some common scenarios you may suffer when you use git. To benefit from this tutorial please make sure you have already set-up a git environment. If not, I would advise you to take a look at <a href="https://help.github.com/articles/set-up-git" target="_blank" rel="external">here</a>.</p><h2 id="How-to-modify-file-and-update-to-remote-repository"><a href="#How-to-modify-file-and-update-to-remote-repository" class="headerlink" title="How to modify file and update to remote repository?"></a>How to modify file and update to remote repository?</h2><pre><code>git add filegit commit -m &quot;Aha, file modified&quot;</code></pre><p>Or, just type</p><pre><code>git commit -am &quot;Aha, file modified&quot;</code></pre><p>After that, push to remote repository:</p><pre><code>git push origin branch_name</code></pre><p>So, what’s difference between these two? I will reach to that later.</p><h2 id="How-to-change-last-commit"><a href="#How-to-change-last-commit" class="headerlink" title="How to change last commit?"></a>How to change last commit?</h2><p>It’s a good practice to fix a wrong commit rather than make a new commit.<br>So, first, edit the file with the problem, make the corrections, then:</p><pre><code>git add now_right_filegit commit --amendgit push --force branch_name   # Warning!</code></pre><p>Be careful, The <code>--force</code> is dangerous, it works fine to me for 99% cases, but it dose have potential harmness, and that’s <a href="http://stackoverflow.com/a/432518/1035859" target="_blank" rel="external">why Linus doesn’t recommend it</a>.  </p><h2 id="How-to-delete-files-in-remote-repository"><a href="#How-to-delete-files-in-remote-repository" class="headerlink" title="How to delete files in remote repository?"></a>How to delete files in remote repository?</h2><p>There are two ways of delete files, delete locally and commit to remote repository, or just directly delete files in remote repository, like:</p><pre><code>git rm --cached file_to_delete</code></pre><p>Even better, you can delete all the files match a certain <a href="http://linux.about.com/library/cmd/blcmdl7_glob.htm" target="_blank" rel="external">glob</a>:</p><pre><code>git rm --cached &apos;merge-*&apos; # delete all the files start with &quot;merge-&quot;</code></pre><h2 id="Pull-or-Fetch"><a href="#Pull-or-Fetch" class="headerlink" title="Pull or Fetch?"></a>Pull or Fetch?</h2><p>There already has an excellent and well accepted answer on StackOverflow, it’s way much better than my explanation –&gt; <a href="http://stackoverflow.com/questions/292357/difference-between-git-pull-and-git-fetch" target="_blank" rel="external">link</a>:</p><blockquote><p>In the simplest terms, <code>git pull</code> does a <code>git fetch</code> followed by a <code>git merge</code>.<br>You can do a <code>git fetch</code> at any time to update your remote-tracking branches under <code>refs/remotes/&lt;remote&gt;/</code>. This operation never changes any of your own local branches under <code>refs/heads</code>, and is safe to do without changing your working copy. I have even heard of people running git fetch periodically in a cron job in the background (although I wouldn’t recommend doing this).</p><p>A <code>git pull</code> is what you would do to bring a local branch up-to-date with its remote version, while also updating your other remote-tracking branches.</p></blockquote><h2 id="So-what-if-files-conflict-after-git-pull-auto-merge-failed"><a href="#So-what-if-files-conflict-after-git-pull-auto-merge-failed" class="headerlink" title="So, what if files conflict after git pull (auto merge failed)"></a>So, what if files conflict after git pull (auto merge failed)</h2><pre><code>git pull # will auto merge unconflicted partgit status # check the information of conflicted files</code></pre><p>Use your favorite editor to edit the conflicted file with “&lt;&lt;&lt;&lt;&lt;&lt;” and “&gt;&gt;&gt;&gt;&gt;&gt;”, save it, commit it, that’s all.</p><p><a href="https://help.github.com/articles/resolving-a-merge-conflict-from-the-command-line" target="_blank" rel="external">Read more</a>…</p><h2 id="How-to-overwrite-rather-than-merge-one-branch-from-another"><a href="#How-to-overwrite-rather-than-merge-one-branch-from-another" class="headerlink" title="How to overwrite, rather than merge, one branch from another"></a>How to overwrite, rather than merge, one branch from another</h2><pre><code>git checkout latest_branchgit merge -s ours to_overwrite_branch</code></pre><p>What’s the <code>ours</code> means here? It’s a merge strategy, you can find it in <a href="http://git-scm.com/docs/git-checkout" target="_blank" rel="external">git checkout doc</a>:</p><blockquote><pre><code>git checkout [--ours| theirs] branch   --ours  --theirs</code></pre><p>When checking out paths from the index, check out stage #2 (ours) or #3 (theirs) for unmerged paths.  </p><p>The index may contain unmerged entries because of a previous failed merge. By default, if you try to check out such an entry from the index, the checkout operation will fail and nothing will be checked out. Using -f will ignore these unmerged entries. The contents from a specific side of the merge can be checked out of the index by using –ours or –theirs. With -m, changes made to the working tree file can be discarded to re-create the original conflicted merge result.</p></blockquote><h2 id="How-to-delete-a-branch"><a href="#How-to-delete-a-branch" class="headerlink" title="How to delete a branch?"></a>How to delete a branch?</h2><pre><code>git branch -d died_branchgit push origin --delete die_branch # or git push origin :died_branch</code></pre><p><a href="http://stackoverflow.com/questions/2003505/how-to-delete-a-git-branch-both-locally-and-remotely" target="_blank" rel="external">Read more</a>…</p><h2 id="How-to-roll-back-to-a-specific-commit"><a href="#How-to-roll-back-to-a-specific-commit" class="headerlink" title="How to roll back to a specific commit?"></a>How to roll back to a specific commit?</h2><pre><code>git reflog show # find revision hashgit checkout revision_hash .</code></pre><p>I will explain this a little bit. <code>git reflog show</code> gives us a list of all the commits and their hashes. Then, checkout that specific hash.</p><p>Read more:</p><ul><li><a href="http://alblue.bandlem.com/2011/05/git-tip-of-week-reflogs.html" target="_blank" rel="external">A deep look at <code>reflog</code></a> </li><li><a href="http://stackoverflow.com/questions/17857723/whats-the-difference-between-git-reflog-and-log" target="_blank" rel="external">Difference between <code>reflog</code> and <code>log</code></a></li></ul><h2 id="What-is-commit-a"><a href="#What-is-commit-a" class="headerlink" title="What is commit -a?"></a>What is commit -a?</h2><p>Many people always ask how to combine <code>git add</code> and <code>git commit</code> in one command, and the most answered solution is <code>git commit -a -m &quot;blah blah&quot;</code>.</p><p>Yes and no. For the files which have been <code>git add</code> before, <code>git commit -a</code> will do the <code>git add</code> for you. But for rest files(aka untracked files), we have to the <code>git add</code>. If you really want to save the time for these tedious work, alias is what you are looking for.</p><h2 id="How-to-git-ignore-something-except-a-certain-file"><a href="#How-to-git-ignore-something-except-a-certain-file" class="headerlink" title="How to git ignore something except a certain file?"></a>How to git ignore something except a certain file?</h2><p>In .gitignore:</p><pre><code># Ignore everything*!except_script.sh</code></pre><p>This will ignore everything but except_scrpit.sh.</p><h2 id="How-to-give-up-all-the-changes-since-last-commit"><a href="#How-to-give-up-all-the-changes-since-last-commit" class="headerlink" title="How to give up all the changes since last commit?"></a>How to give up all the changes since last commit?</h2><p>Once my silly cat was dancing on my keyboard after a commit mess up all the files!<br>Luckily, we can use</p><pre><code>git reset hard --HEAD^</code></pre><p>to revert to the previous commit.</p><p>Or, I wrongly <code>git add should_not_add_file</code> , we can also use</p><pre><code>git reset HEAD should_not_add_file</code></pre><p>to upstage that file. </p><h2 id="How-to-clone-a-specific-branch"><a href="#How-to-clone-a-specific-branch" class="headerlink" title="How to clone a specific branch"></a>How to clone a specific branch</h2><p><a href="http://stackoverflow.com/questions/1911109/git-clone-a-specific-branch" target="_blank" rel="external">Stolen from Stackoverflow again</a></p><pre><code>git clone -b &lt;branch&gt; &lt;remote_repo&gt;</code></pre><p>Example:</p><pre><code>git clone -b my-branch git@github.com:user/myproject.git</code></pre><p>Alternative (no public key setup needed):</p><pre><code>git clone -b my-branch https://git@github.com/username/myproject.git</code></pre>]]></content>
    
    <summary type="html">
    
      A personal Git FAQ
    
    </summary>
    
    
      <category term="git" scheme="http://wilbeibi.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Collaborative programming with Dropbox</title>
    <link href="http://wilbeibi.com/2014/07/2014-07-17-dropbox-coding/"/>
    <id>http://wilbeibi.com/2014/07/2014-07-17-dropbox-coding/</id>
    <published>2014-07-17T07:00:00.000Z</published>
    <updated>2016-12-08T22:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I am working on a web project collaborate with my friend Kelun. He is in charge of front-end code and I am taking care of backend code. So, here is a problem: How can we programming together smoothly? Which means, at any moment of time, I can check his code while he is programming.</p><h2 id="Why-not-Github"><a href="#Why-not-Github" class="headerlink" title="Why not Github?"></a>Why not Github?</h2><p>No, that’s little bit heavy for this project. So, what’s alternative choices? Dropbox! Dropbox maybe the easiest way to share folder (wait, you means <code>rsync</code>? Dropbox did a lot of algorithm improvement to ensure it’s higher speed of syncing)<br><img src="http://dl.dropbox.com/u/1656836/web3/invite-to-folder.png" alt="Alt text"></p><p>But, something weird happens. My Webstorm automatically changed layout views. That because he is also using Webstorm, and In each project, Webstorm use a <code>.idea/</code> directory to save specific settings (as the document below said).</p><blockquote><p>Project settings are stored with each specific project as a set of xml files under the .idea folder. If you specify the default project settings, these settings will be automatically used for each newly created project.</p></blockquote><h2 id="Is-there-any-gitginore-like-file-in-Dropbox"><a href="#Is-there-any-gitginore-like-file-in-Dropbox" class="headerlink" title="Is there any .gitginore like file in Dropbox?"></a>Is there any <code>.gitginore</code> like file in Dropbox?</h2><p>Sure. Of course it’s not as powerful as <code>.gitginore</code>. In dropbox -&gt; Preference -&gt; Account -&gt; Change Setting, unclick <code>.idea</code> folder, that’s all.</p><p>Also, I strongly suggest unclick <code>node_modules</code> folder. It takes Dropbox too much time to synchronize a bunch of small pieces of files.</p><p>And if you sometimes use Emacs, to avoid annoying temporary files (but some time really save you ass), the only way I know is to add this in <code>.emacs</code> file.</p><pre><code>(setq make-backup-files nil)</code></pre><p>Please feel free to correct my typos or grammar.</p>]]></content>
    
    <summary type="html">
    
      Easy solution of real time collaborative coding
    
    </summary>
    
    
      <category term="miscellaneous" scheme="http://wilbeibi.com/tags/miscellaneous/"/>
    
  </entry>
  
  <entry>
    <title>Scrape data the right way Part:1</title>
    <link href="http://wilbeibi.com/2014/05/2014-05-06-scrape_way/"/>
    <id>http://wilbeibi.com/2014/05/2014-05-06-scrape_way/</id>
    <published>2014-05-06T07:00:00.000Z</published>
    <updated>2016-12-08T22:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>There is frequently a need to scrape data. Obviously, Python is a good choice for this. The famous libraries like <a href="http://www.crummy.com/software/BeautifulSoup/" target="_blank" rel="external">BeautifulSoup</a> provides a bunch of functions to do these stuffs. But personally, I prefer <a href="http://lxml.de/" target="_blank" rel="external">lxml</a>.</p><h2 id="Why-lxml"><a href="#Why-lxml" class="headerlink" title="Why lxml"></a>Why lxml</h2><p>There already has some <a href="http://stackoverflow.com/questions/4967103/beautifulsoup-and-lxml-html-what-to-prefer#" target="_blank" rel="external">comparison</a> about pros and cons of each library. As <a href="http://lxml.de/elementsoup.html" target="_blank" rel="external">lxml document</a> said:</p><blockquote><p>BeautifulSoup uses a different parsing approach. It is not a real HTML parser but uses regular expressions to dive through tag soup. It is therefore more forgiving in some cases and less good in others. It is not uncommon that lxml/libxml2 parses and fixes broken HTML better, but BeautifulSoup has superior support for encoding detection. <strong>It very much depends on the input which parser works better.</strong><br>… …<br>The downside of using this parser is that it is <strong>much slower than</strong> the HTML parser of lxml. <strong>So if performance matters, you might want to consider using soupparser only as a fallback for certain cases.</strong></p></blockquote><p>In short: lxml is faster when parsing well-formed web page.</p><h2 id="Example-Grab-data-from-Craglist"><a href="#Example-Grab-data-from-Craglist" class="headerlink" title="Example: Grab data from Craglist"></a>Example: Grab data from Craglist</h2><p>This is a common scenario. First get links of each entries in a <code>index</code> page.</p><p>For example, find all housing in <a href="http://losangeles.craigslist.org/hhh/index.html" target="_blank" rel="external">http://losangeles.craigslist.org/hhh/index.html</a>. In Chrome, Inspect Element, get XPath link from one link:<br><img src="http://i.imgur.com/M5twZ1U.png" alt=""></p><p>The xpath is <code>/*[@id=&quot;toc_rows&quot;]/div[2]/p[1]/span[2]/a/@href</code>, from p[1] to p[100]. Save these links to a file <code>crag_link.txt</code>. </p><pre><code>from lxml import htmlimport requestswith open(&apos;crag_link.txt&apos;, &apos;a&apos;) as f:    for i in range(0, 1000, 100):        pg = &apos;http://losangeles.craigslist.org/hhh/index&apos; + str(i) + &apos;.html&apos;        src = requests.get(pg)        if src.status_code == 404:            sys.exit(1)        tree = html.fromstring(src.text)        print &apos;Get page&apos;, i        for j in range(1, 100+1):            x_link = &apos;//*[@id=&quot;toc_rows&quot;]/div[2]/p[&apos; + str(j) + &apos;]/span[2]/a/@href&apos;            links = tree.xpath(x_link)            for ln in links:                f.write( &apos;http://losangeles.craigslist.org&apos; + ln + &apos;\n&apos;)    f.close()</code></pre><p>Click into one of the page, for instance, we want to get post id, copy xpath<br>like <code>//*[@id=&quot;pagecontainer&quot;]/section/section[2]/div[2]/p[1]</code>. According to <a href="http://www.w3.org/TR/xpath/" target="_blank" rel="external">XPath syntax</a>, these path add suffix <code>/text()</code> is what we need.</p><pre><code>try:    post_id = tree.xpath(&apos;//*[@id=&quot;pagecontainer&quot;]/section/section[2]/div[2]/p[1]/text()&apos;)except:    # Handle Error</code></pre><p>The reason we add try/catch block here is to prevent missing data. Wait a second, what if we have 30 attribute to scrape, do we need to write try/catch 30 times. Definitely no. Wrap them into a function might be a good idea. BTW, hardcode xpath into program is not a good idea, by writing a function, we can pass it as a parameter(Or even better, store attribute names and xpaths in a dictionary).</p><pre><code>def get_attr(tree, xps):    return attr_name = tree.xpath(xps)&apos;&apos;&apos; xps_dict look like: {&apos;post_id&apos;:&apos;//*&lt;somehing&gt;/p[1]/text()&apos;,&apos;post_time&apos;:&apos;//*&lt;somehing&gt;/p[1]/text()&apos;}&apos;&apos;&apos;for a, x in xps_dict.iteritems():    attr[a] = get_attr(tree, x)</code></pre><p>For the Part 2, I will carry on, talk about encoding problem, prevent duplicates and so forth.</p>]]></content>
    
    <summary type="html">
    
      My experience on how to scrape data from web.
    
    </summary>
    
    
      <category term="notes" scheme="http://wilbeibi.com/tags/notes/"/>
    
  </entry>
  
</feed>
